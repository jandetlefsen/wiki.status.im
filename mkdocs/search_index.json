{
    "docs": [
        {
            "location": "/", 
            "text": "Status - a Mobile Ethereum OS\n\n\nStatus is a free (libre) and open source mobile client targeting Android \n iOS built, entirely on \nEthereum\n technologies.\n\n\nThanks to the new protocols Ethereum has introduced, there's a whole new ecosystem of applications being developed that are completely decentralised (also known as DApps), and Status aims to provide a user interface to access them. These decentralized applications remove the need for middlemen and centralised servers, providing a clear path forward towards an internet where users get to own their own data, and an economy built on permissionless, open protocols.\n\n\nIt is our belief that messengers are evolving into a new type of OS, and are becoming gateways to our economies and social lives. Status uses messaging as a platform, and by combining both a messenger and a browser we are building a gateway for everyday smartphone users to begin using DApps, and a simple way for DApp developers to reach new users.\n\n\nStatus runs \ngo-ethereum\n directly from your mobile device, providing a mobile Ethereum node in your pocket!\n\n\nWe've love for you to join our community, and be a part of this exciting journey.\n\n\n\n\nWhy?\n\n\nWe believe in a medium of free interaction, economies with permissionless fair-access and a world without parasitic intermediaries. \n\n- We want to create protocols and policies that can scale, from small interactions between friends and groups to truly global communication. At the heart of our belief is the ability for individuals to communicate securely without being inhibited by legacy systems or antiquated beliefs.\n- We want to empower everyone to take control of their digital lives and responsibility for their own data. We want the way we conduct ourselves privately and publicly to recommend itself to a mass audience; and for the tools we build and the way we use them to improve the lives of everyone.\n- We want deep insights into our societies and our own economies so we can make informed, data-driven decisions on what truly makes lives better. The Ethereum blockchain, distributed aplications, Swarm and Whisper provide us with a clear path forward.\n\n\nIf this interests you, \nhelp us make Status a reality\n - anyone can contribute and we need everyone at any skill level to participate.\n\n\nHow to Contribute?\n\n\nNavigate to the Contributing menu item above, \njoin our Community Slack\n, or choose what interests you:\n\n\n\n\n\n\nDeveloper\n\nDevelopers are the heart of software and to keep Status beating we need all the help we can get. If you're looking to code in ClojureScript or Golang then Status is the project for you! We use React Native and there is even some Java/Objective-C too!\n\nWant to learn more about it? Start by reading our \nDeveloper Introduction\n which guides you through the technology stack and and start browsing \nbeginner issues\n. Then you can read how to \nBuild Status\n, which talks about managing project dependencies, coding guidelines and testing procedures.  \n\n\n\n\n\n\nCommunity Management\n\nMetcalfe's law states that the value of a network is proportional to the square of the number of connected users of the system - without community Status is meaningless. We're looking to create a positive, fun environment to explore new ideas, experiment and grow the Status community. Building a community takes a lot of work, but the people you'll meet and long lasting relationships you'll form makes it all worthwhile. Check out our guide on \nhow to grow our Community\n\n\n\n\n\n\nSpecification / Documentation\n\nJohn Dewey once said \"Education is not preparation for life; education is life \nitself\n \". Developers \n Designers need guidance and it all starts from documentation and specifications. Our software is only as good as its documentation, head over to our \nwiki\n and see how you can improve what we have.\n\n\n\n\n\n\nBlog Writing\n\nContent is King; keeping \nour blog\n up to date and informing the community of news helps keep everyone on the same page. We're looking for contributions via guest posts, interviews, progress reports, and are completely open to other ideas. \nJump on our Slack\n and discuss with Carl how you can contribute.\n\n\n\n\n\n\nOutreach / Marketing\n\nIn this day and age attention is limited, we need all the help we can get to find people who are interested in Status, whether that be through paid user acquisition, public relations or community otherreach, check out our \nOutreach' Guide\n to see how you can spread the word and grow our community.\n\n\n\n\n\n\nTesters\n\nIt's bug hunting season! Status is currently in Alpha and there are sure to be a bunch of education, \ngrab your fresh copy of Status\n and shake your phone to submit bug reports, or start browsing our \nGithub Issues\n. Every bug you find brings Status closer to stable, usable software for everyone to enjoy!\n\n\n\n\n\n\nSecurity\n\nStatus is a visual interface to make permanent changes on the Blockchain, it handles crypto-tokens that have real value and allows 3rd party code execution. Security is paramount to its success. You are given permission to break Status as hard as you can, as long as you share your findings with the community!\n\n\n\n\n\n\nDesign \n User Experience\n\nIt's all about that sex appeal, we want cryptocurrencies to be easy and fun to use, ugly software doesn't help adoption. \nCheck out our designs\n and show us how to make them better!\n\n\n\n\n\n\nTranslations\n\nOur goal is to make Status available to everyone. We current support ~30 languages within the app, but if you see something weird in the translations or would like to help us add a new translations, \nread our Translation Guide\n. Our website is currently only available in English, and if you'd like to help us make this multi-lingual it's be greatly appreciated, please ask us about it \non Slack\n.\n\n\n\n\n\n\nEvangelism\n\nHelp us spread the word! Tell a friend \nright now\n, infact tell \neveryone\n - yell from a mountain if you have to, every person counts!\n\n\n\n\n\n\nGive me Binaries!\n\n\nCurrently the fastest way to get your hands on a binary is to join our Early Access by submitting your email on our \nHome Page\n, or by \nbuilding it yourself\n. We'll be continually rolling out new invites for early supporters of the project, before a public-release once Status is in a more stable state. Nightly builds for Android can be found on our \nArtifactory\n.\n\n\n// TODO GPlay, TestFlight Instructions \n FDroid\n\n\nThe Roadmap\n\n\nHere is our current roadmap, note that the version numbers in this roadmap might not correlate with features as we are switching to a 'rolling release' cycle much like the Linux kernel, instead of feature based releases.\n\n\n\n\nCore Contributors\n\n\n\nJarrad (\n@jarradh\n) - Cofounder and Thought Leader.\n\n\n\nCarl (\n@carlbennetts\n) - Cofounder and Communications \n Marketing.\n\n\n\nRoman (\n@rasom\n) - Clojure and project lead.\n\n\n\nAlexander (\n@alwx\n) - Clojure ninja!\n\n\n\nAndrey (\n@flexsurfer\n) - Clojure.\n\n\n\nGustavo (\n@GustavoNunes\n) - Clojure.\n\n\n\nVictor (\n@farazdagi\n) - Golang one-man-army.\n\n\n\nAndrei (\n@andmironov\n) - Visual design and user experience conjurer.\n\n\n\nAnna (\n@annadanchenko\n) - Head of QA.\n\n\n\nTatu (\n@smokyish\n) - Community Manager.\n\n\nSpecial thanks to \n@adrian-tiberius\n.\nWithout the dedication of these fine gentlemen and lady, Status would not exist.\n\n\nContact us\n\n\nFeel free to email us at \nsupport@status.im\n or better yet, \njoin our Slack\n.\n\n\nGot a feature request or suggestion, download Status and shake your phone, failing that search our \nGithub Issues\n.\n\n\nLicense\n\n\nLicensed under the \nMozilla Public License v2.0", 
            "title": "Welcome"
        }, 
        {
            "location": "/#status-a-mobile-ethereum-os", 
            "text": "Status is a free (libre) and open source mobile client targeting Android   iOS built, entirely on  Ethereum  technologies.  Thanks to the new protocols Ethereum has introduced, there's a whole new ecosystem of applications being developed that are completely decentralised (also known as DApps), and Status aims to provide a user interface to access them. These decentralized applications remove the need for middlemen and centralised servers, providing a clear path forward towards an internet where users get to own their own data, and an economy built on permissionless, open protocols.  It is our belief that messengers are evolving into a new type of OS, and are becoming gateways to our economies and social lives. Status uses messaging as a platform, and by combining both a messenger and a browser we are building a gateway for everyday smartphone users to begin using DApps, and a simple way for DApp developers to reach new users.  Status runs  go-ethereum  directly from your mobile device, providing a mobile Ethereum node in your pocket!  We've love for you to join our community, and be a part of this exciting journey.", 
            "title": "Status - a Mobile Ethereum OS"
        }, 
        {
            "location": "/#why", 
            "text": "We believe in a medium of free interaction, economies with permissionless fair-access and a world without parasitic intermediaries.  \n- We want to create protocols and policies that can scale, from small interactions between friends and groups to truly global communication. At the heart of our belief is the ability for individuals to communicate securely without being inhibited by legacy systems or antiquated beliefs.\n- We want to empower everyone to take control of their digital lives and responsibility for their own data. We want the way we conduct ourselves privately and publicly to recommend itself to a mass audience; and for the tools we build and the way we use them to improve the lives of everyone.\n- We want deep insights into our societies and our own economies so we can make informed, data-driven decisions on what truly makes lives better. The Ethereum blockchain, distributed aplications, Swarm and Whisper provide us with a clear path forward.  If this interests you,  help us make Status a reality  - anyone can contribute and we need everyone at any skill level to participate.", 
            "title": "Why?"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Navigate to the Contributing menu item above,  join our Community Slack , or choose what interests you:    Developer \nDevelopers are the heart of software and to keep Status beating we need all the help we can get. If you're looking to code in ClojureScript or Golang then Status is the project for you! We use React Native and there is even some Java/Objective-C too! \nWant to learn more about it? Start by reading our  Developer Introduction  which guides you through the technology stack and and start browsing  beginner issues . Then you can read how to  Build Status , which talks about managing project dependencies, coding guidelines and testing procedures.      Community Management \nMetcalfe's law states that the value of a network is proportional to the square of the number of connected users of the system - without community Status is meaningless. We're looking to create a positive, fun environment to explore new ideas, experiment and grow the Status community. Building a community takes a lot of work, but the people you'll meet and long lasting relationships you'll form makes it all worthwhile. Check out our guide on  how to grow our Community    Specification / Documentation \nJohn Dewey once said \"Education is not preparation for life; education is life  itself  \". Developers   Designers need guidance and it all starts from documentation and specifications. Our software is only as good as its documentation, head over to our  wiki  and see how you can improve what we have.    Blog Writing \nContent is King; keeping  our blog  up to date and informing the community of news helps keep everyone on the same page. We're looking for contributions via guest posts, interviews, progress reports, and are completely open to other ideas.  Jump on our Slack  and discuss with Carl how you can contribute.    Outreach / Marketing \nIn this day and age attention is limited, we need all the help we can get to find people who are interested in Status, whether that be through paid user acquisition, public relations or community otherreach, check out our  Outreach' Guide  to see how you can spread the word and grow our community.    Testers \nIt's bug hunting season! Status is currently in Alpha and there are sure to be a bunch of education,  grab your fresh copy of Status  and shake your phone to submit bug reports, or start browsing our  Github Issues . Every bug you find brings Status closer to stable, usable software for everyone to enjoy!    Security \nStatus is a visual interface to make permanent changes on the Blockchain, it handles crypto-tokens that have real value and allows 3rd party code execution. Security is paramount to its success. You are given permission to break Status as hard as you can, as long as you share your findings with the community!    Design   User Experience \nIt's all about that sex appeal, we want cryptocurrencies to be easy and fun to use, ugly software doesn't help adoption.  Check out our designs  and show us how to make them better!    Translations \nOur goal is to make Status available to everyone. We current support ~30 languages within the app, but if you see something weird in the translations or would like to help us add a new translations,  read our Translation Guide . Our website is currently only available in English, and if you'd like to help us make this multi-lingual it's be greatly appreciated, please ask us about it  on Slack .    Evangelism \nHelp us spread the word! Tell a friend  right now , infact tell  everyone  - yell from a mountain if you have to, every person counts!", 
            "title": "How to Contribute?"
        }, 
        {
            "location": "/#give-me-binaries", 
            "text": "Currently the fastest way to get your hands on a binary is to join our Early Access by submitting your email on our  Home Page , or by  building it yourself . We'll be continually rolling out new invites for early supporters of the project, before a public-release once Status is in a more stable state. Nightly builds for Android can be found on our  Artifactory .  // TODO GPlay, TestFlight Instructions   FDroid", 
            "title": "Give me Binaries!"
        }, 
        {
            "location": "/#the-roadmap", 
            "text": "Here is our current roadmap, note that the version numbers in this roadmap might not correlate with features as we are switching to a 'rolling release' cycle much like the Linux kernel, instead of feature based releases.", 
            "title": "The Roadmap"
        }, 
        {
            "location": "/#core-contributors", 
            "text": "Jarrad ( @jarradh ) - Cofounder and Thought Leader.  \nCarl ( @carlbennetts ) - Cofounder and Communications   Marketing.  \nRoman ( @rasom ) - Clojure and project lead.  \nAlexander ( @alwx ) - Clojure ninja!  \nAndrey ( @flexsurfer ) - Clojure.  \nGustavo ( @GustavoNunes ) - Clojure.  \nVictor ( @farazdagi ) - Golang one-man-army.  \nAndrei ( @andmironov ) - Visual design and user experience conjurer.  \nAnna ( @annadanchenko ) - Head of QA.  \nTatu ( @smokyish ) - Community Manager.  Special thanks to  @adrian-tiberius .\nWithout the dedication of these fine gentlemen and lady, Status would not exist.", 
            "title": "Core Contributors"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Feel free to email us at  support@status.im  or better yet,  join our Slack .  Got a feature request or suggestion, download Status and shake your phone, failing that search our  Github Issues .", 
            "title": "Contact us"
        }, 
        {
            "location": "/#license", 
            "text": "Licensed under the  Mozilla Public License v2.0", 
            "title": "License"
        }, 
        {
            "location": "/getting-started/mission-and-core-values/", 
            "text": "Mission \n Core Values\n\n\nOn mobile devices today more time is spent in messenger apps than in any other type of application.  Mobile devices will be, and in many cases already are, where people do most if not all of their personal computing.  Status is an encrypted and decentralised messaging application that frees users both from third party surveillance and from the mining of the meta data in their social graph.\n\nMore than an instant messenger, Status is a platform that allows anyone with a capable smart phone to use decentralized applications (DApps) right from their mobile device.  \n\n\nJoin us in putting ethereum on every mobile device on the planet.\n\n\nThe Mission\n\n\n\n\n\n\nTo ease the transition to a more open mobile internet.\n\n\n\n\n\n\nTo help anyone, anywhere interact with ethereum, and make Web 3 available for the average smart phone user.\n\n\n\n\n\n\nStatus fosters links with the wider ethereum DApp community and showcases what the ecosystem has to offer.\n\n\n\n\n\n\nTo achieve our mission we intend to employ a strategy that contains three core components:- \n\n\nTechnology\n,\n    + Application\n    + Blockchain\n\nCommunity\n \n    + Developer\n    + Users \n\nUser Acquisition\n / \nMass Adoption\n.\n\n\nTechnology\n\n\n\n\n\n\nStatus is built using ClojureScript, React and Golang. It includes a geth node on your device that uses the Light Ethereum Subprotocol (LES) to validate and sync with the blockchain. It uses Whisper (shh) as its messaging client and aims to integrate Swarm for storage.\n\n\n\n\n\n\nTo sync with and validate the ethereum blockchain on a mobile device, Status deploys a geth node using the Light Ethereum Subprotocol (LES).\n\n\n\n\n\n\nStatus\u2019 messaging are transmitted using the Whisper (shh) protocol.\n\n\n\n\n\n\nStatus aims to integrate Swarm for storage.\n\n\n\n\n\n\nDeveloper / Contributor Community\n\n\n\n\n\n\nWe aim to help anyone who is keen to learn about and/or contribute to the community's effort.\n\n\n\n\n\n\nAs a community we strive to welcome and encourage those who are (as we so recently were,) new to the paradigm of massively concurrent permissionless peer-to-peer networks.\n\n\n\n\n\n\nWe approach all contributions with an open mind and a respect for the opinions of our fellow developers.\n\n\n\n\n\n\nThe Status Development community actively explores and experiments with the latest ethereum technologies in the ongoing drive to provide the best possible user experience.\n\n\n\n\n\n\nWe aim to foster an environment conducive to easy, intuitive and consistent learning and one that fosters innovation at all levels.\n\n\n\n\n\n\nUser Community / Aquisition\n\n\n\n\n\n\nStatus will not compromise the sovereignty and security of user data.\n\n\n\n\n\n\nWe offer an intuitive entry point into decentralized, encrypted, peer-to-peer networks that is maintained by a large and diverse group of developers.\n\n\n\n\n\n\nMarketing campaigns\n\n\n+ DApp developers, \n+ User acquisition for mass adoption\n\n\n\nBeliefs\n\n\n\n\n\n\nStatus.im believes in an open internet. Built, not only on open protocols, but upon Free/Libre software where the costs (financial or otherwise) of participation are negligible for \nall\n. \n\n\n\n\n\n\nStatus is founded on the belief that communication is at the heart of human social (and economic) life; and that society thrives through direct interaction rather than from intermediation.  Status can pave the way towards \nconversational crypto-commerce.\n \n\n\n\n\n\n\nWe believe that systems like ethereum have the potential to improve the very fabric of our society.  Status.im should solve the problem of giving \nordinary people\n across the globe easy access to the power and promise of Ethereum and Web3.  \n\n\n\n\n\n\nStatus.im is passionate about Distributed and Decentralised technology in general, and about the advantages of ethereum\u2019s \npublic Blockchain\n in particular.  \n\n\n\n\n\n\nWe believe that people should directly control the use of their own personal data, and the history of their social interactions.  We imagine the benefits to \nall\n of a future where distributed and decentralized applications make proprietary intermediaries and centralised services (which exploit their users) obsolete.  \n\n\n\n\n\n\nCommunication, decision making and control should be clear and transparent to everyone in the community.\n\n\n\n\n\n\nOur work is driven by a belief that Ethereum and public blockchains can yield great benefits to society, and access to DApps and Ethereum should be made available to \nanyone\n, anywhere.\n\n\n\n\n\n\nCore Values\n\n\n\n\n\n\nReciprocity, open-mindedness, respect and encouragement.\n\n\n\n\n\n\nThe systems we're creating must be open, permissionless, award fair access and Distribute, Decentralise, and Democratise power.\n\n\n\n\n\n\nStatus is licenced as Free Libre \n Open Source software, which allow \nanyone\n to run the software for \nany purpose\n as well as to \nstudy\n, \nModify\n, and \ndistribute\n the software and any adapted versions.", 
            "title": "Mission & Core Values"
        }, 
        {
            "location": "/getting-started/mission-and-core-values/#mission-core-values", 
            "text": "On mobile devices today more time is spent in messenger apps than in any other type of application.  Mobile devices will be, and in many cases already are, where people do most if not all of their personal computing.  Status is an encrypted and decentralised messaging application that frees users both from third party surveillance and from the mining of the meta data in their social graph. \nMore than an instant messenger, Status is a platform that allows anyone with a capable smart phone to use decentralized applications (DApps) right from their mobile device.    Join us in putting ethereum on every mobile device on the planet.", 
            "title": "Mission &amp; Core Values"
        }, 
        {
            "location": "/getting-started/mission-and-core-values/#the-mission", 
            "text": "To ease the transition to a more open mobile internet.    To help anyone, anywhere interact with ethereum, and make Web 3 available for the average smart phone user.    Status fosters links with the wider ethereum DApp community and showcases what the ecosystem has to offer.    To achieve our mission we intend to employ a strategy that contains three core components:-   Technology ,\n    + Application\n    + Blockchain Community  \n    + Developer\n    + Users  User Acquisition  /  Mass Adoption .", 
            "title": "The Mission"
        }, 
        {
            "location": "/getting-started/mission-and-core-values/#technology", 
            "text": "Status is built using ClojureScript, React and Golang. It includes a geth node on your device that uses the Light Ethereum Subprotocol (LES) to validate and sync with the blockchain. It uses Whisper (shh) as its messaging client and aims to integrate Swarm for storage.    To sync with and validate the ethereum blockchain on a mobile device, Status deploys a geth node using the Light Ethereum Subprotocol (LES).    Status\u2019 messaging are transmitted using the Whisper (shh) protocol.    Status aims to integrate Swarm for storage.", 
            "title": "Technology"
        }, 
        {
            "location": "/getting-started/mission-and-core-values/#developer-contributor-community", 
            "text": "We aim to help anyone who is keen to learn about and/or contribute to the community's effort.    As a community we strive to welcome and encourage those who are (as we so recently were,) new to the paradigm of massively concurrent permissionless peer-to-peer networks.    We approach all contributions with an open mind and a respect for the opinions of our fellow developers.    The Status Development community actively explores and experiments with the latest ethereum technologies in the ongoing drive to provide the best possible user experience.    We aim to foster an environment conducive to easy, intuitive and consistent learning and one that fosters innovation at all levels.", 
            "title": "Developer / Contributor Community"
        }, 
        {
            "location": "/getting-started/mission-and-core-values/#user-community-aquisition", 
            "text": "Status will not compromise the sovereignty and security of user data.    We offer an intuitive entry point into decentralized, encrypted, peer-to-peer networks that is maintained by a large and diverse group of developers.", 
            "title": "User Community / Aquisition"
        }, 
        {
            "location": "/getting-started/mission-and-core-values/#marketing-campaigns", 
            "text": "+ DApp developers, \n+ User acquisition for mass adoption", 
            "title": "Marketing campaigns"
        }, 
        {
            "location": "/getting-started/mission-and-core-values/#beliefs", 
            "text": "Status.im believes in an open internet. Built, not only on open protocols, but upon Free/Libre software where the costs (financial or otherwise) of participation are negligible for  all .     Status is founded on the belief that communication is at the heart of human social (and economic) life; and that society thrives through direct interaction rather than from intermediation.  Status can pave the way towards  conversational crypto-commerce.      We believe that systems like ethereum have the potential to improve the very fabric of our society.  Status.im should solve the problem of giving  ordinary people  across the globe easy access to the power and promise of Ethereum and Web3.      Status.im is passionate about Distributed and Decentralised technology in general, and about the advantages of ethereum\u2019s  public Blockchain  in particular.      We believe that people should directly control the use of their own personal data, and the history of their social interactions.  We imagine the benefits to  all  of a future where distributed and decentralized applications make proprietary intermediaries and centralised services (which exploit their users) obsolete.      Communication, decision making and control should be clear and transparent to everyone in the community.    Our work is driven by a belief that Ethereum and public blockchains can yield great benefits to society, and access to DApps and Ethereum should be made available to  anyone , anywhere.", 
            "title": "Beliefs"
        }, 
        {
            "location": "/getting-started/mission-and-core-values/#core-values", 
            "text": "Reciprocity, open-mindedness, respect and encouragement.    The systems we're creating must be open, permissionless, award fair access and Distribute, Decentralise, and Democratise power.    Status is licenced as Free Libre   Open Source software, which allow  anyone  to run the software for  any purpose  as well as to  study ,  Modify , and  distribute  the software and any adapted versions.", 
            "title": "Core Values"
        }, 
        {
            "location": "/getting-started/user-guide/", 
            "text": "User Guide\n\n\nSetting It All Up\n\n\nSpecial thanks to \n@cryptowanderer\n for contributing this fantastic guide!\n\n\nWelcome to Status! This is Ethereum, anywhere. Ethereum everywhere. A world computer in your pocket. It is so many cool and amazing things that is difficult to know where to start. Being entirely too overwhelmed with the awesomeness that is an Ethereum light client running on your mobile phone, I suppose we\u2019ll just begin at the beginning.\n\n\nOnce you have downloaded the app, installed it and opened it, it should take you into a chat with Console: a dApp that lives inside status and lets you set up your account and control all the important stuff (as well as a bunch of other rad features, which we will get to in good time).\n\n\n\n\nAs you can see, I have already been chatting a fair bit with Console (friends, yay!!). The UI concept here is that when someone sends an action message requesting (in this case) a password, or money, or a confirmation code etc., you can tap the blue block and it will insert the appropriate syntax to respond to that request, followed by your input. \n\n\nOne other thing to note is the \u2018Available\u2019 beneath \u2018Console\u2019 in the top left. This means that my phone has synced with the ropsten testnet (unbelievable right?!). I am running android 7.0 and am doing so over wifi. It took just under 40mins for me to sync, though there are varying reports coming in to our slack depending on phone, OS and network differences. Still, ~40min sync time on a mobile is just insane. Thanks Zsolt for the amazing \nLES\n!\n\n\n\n\nYou can see that you can optionally give your phone number to help status sync with your existing contacts. This is not mandatory and the app will work fine without it. If you do provide it, please make sure to give your country code (so +27\u2026 for me) so that status can send you the confirmation message. Note that if you run into any issues, you can just shake your phone and this should bring up a screen that allows you to submit an error report directly to the status team. You can select from the options what you want to do, but generally it seems best to \nReport a Problem\n:\n\n\n\n\nYou should be able to select a colour to indicate the severity of the issue on the second screen above. I really want to make sure that Jarrad, Carl and the crew are on their toes, so I have gone for red here. Hitting the forward button (top right) should take you to where the magic really happens:\n\n\n\n\nPlease note the \nTake a screen recording\n button in the bottom left. This is how the team prefers you to submit bug reports as it is enormously helpful with seeing exactly what went wrong and so providing insight into where to go to fix the issue. You can enter your email, take a video and go ahead and submit. At which point we issue you a massive thank you for being such a stellar alpha tester. Go you!\n\n\nActually Using the App\n\n\nOK, now that we have the setup out the way, we can get into the really fun stuff. Once you have generated your account with Console, you can open both the ropsten testnet faucet and the status test faucet to get some shweet test ether into your account so that you can go out and convince actual people to be your friends too. Please do not open an issue if this doesn\u2019t happen - we can\u2019t convince people to like you (even if you do use the best tech around).\n\n\nTo open both faucets, tap the hamburger menu with the blue dot to the left of the chat box:\n\n\n\n\nIn words, we tap the menu on the left, scroll down and select the faucet option and then select which testnet we want to get ether from. Repeat this twice to open both faucets and you should get a bit more ether a bit more quickly. Don\u2019t worry about the web3 stuff in the first screenshot - we\u2019ll get to that (who said you can\u2019t build suspense in a technical user guide?).\n\n\nSeeing as we\u2019re now finished chatting to Console for the moment, we can hit the back button and this will take us into the Chats page:\n\n\n\n\nHere you can see all the lovely people that you have been chatting to. It\u2019s really straightforward and intuitive, so behave as you normally would in WhatsApp or WeChat etc. Tapping a conversation will take you into it, and you can use the bottom three tabs to navigate through the Chats, Discover and Contacts screen. You can also just swipe right. Just do you.\n\n\nThere is another important dApp that lives here as well - your wallet. Selecting it should take you to a screen like this:\n\n\n\n\nThe main screen opens what is essentially an in-app browser that will show your main balance. You can scroll that screen down using the small down arrow at the top in the centre to see the actual transactions in a chat-like interface. As you can see, I am super rich - absolutely rolling in that test ether - and have sent some to Jarrad as mad props for building the app, and received some from Roland as a little test.\n\n\nIf you navigate back out of the wallet chat and swipe right, or select the Discover tab at the bottom, you will get to the Discover page:\n\n\n\n\nHere you can see hashtags people are using and discover all the different conversations going on. Swipe right through the cards to see the most popular categories, or scroll down to see the most recent updates. If you want to make a message of your own appear here, you need to open your profile page and edit your status with the hashtag you want to see appear here. Start a meme or hop onto an existing one - it\u2019s all up to you. You can get to your profile page by tapping the little hamburger menu in the very top left of the app:\n\n\n\n\nDon\u2019t stress about the \nSettings\n tab - that will be functional in a later release. Your profile page should look like the below. To edit it, hit the three dots in the top right:\n\n\n\n\nTap next to your name to edit that, tap your status to edit that and hit the pencil icon by the picture to upload your own. Remember to include that hashtag if you want it to appear on the Discover page.\n\n\nOnce that is all done and you\u2019ve broadcast a status for all the world to see, swipe right once more (or use the tabs for navigation) and you will get to the Contacts page. Here you will see the dApps that are currently living in status as well as all the wonderful people you have connected with:\n\n\n\n\nThese dApps all work in essentially the same way as the wallet - you can open a chat with them, which will direct you to an in app browser that displays whatever is appropriate for that app. There is a small down arrow at the top which you can scroll down to see any transactions that have occurred between you and the dApp. Directly from within status - signed, sealed and delivered, it all just works. Mind-boggling, I know.\n\n\n\n\nIf you close your app or otherwise have an issue, when you reopen it, you should be directed to  a screen which looks like the below. Select the account that belongs to you (in the case where you set up more than one) and then put in the appropriate password and you should get back to the chat screen:\n\n\n\n\nIf that doesn\u2019t work for you or your account doesn\u2019t appear like mine, hit the \nRecover access\n button at the bottom of the first screen and follow the prompts to input the 12 word passphrase console gave you when you first set stuff up and your password.\n\n\nHappy sailing!\n\n\nFor the Adventurous\n\n\nWe\u2019ve covered all the basic functionality as it stands, but there is so much more that you can do with status. Most of this stuff will only become available in the beta release or after, but developers around the world should be getting really excited to start building dApps to live alongside Flight Delays and Maker etc. \n\n\nThough it is by no means complete yet, you can do a lot more than just set you account up using Console - it is, after all, a full dApp of its own. Go back to that chat and type \nweb3.\n (the fullstop is important) and \nweb3.eth.\n:\n\n\n\n\nYou should be able to see a whole bunch of suggestions for the sorts of things you can do directly from Console, the most basic of which is \nweb3.eth.blockNumber\n which will return the current block number on the ropsten testnet. If this doesn\u2019t blow your mind, I\u2019m not sure what will. There are, as I said, still improvements to be made here regarding technical things like retaining state between messages, but it will get there.\n\n\nIf you want to dive in even further and help develop the app, contribute some code or otherwise get involved in the technical side of things, here are the links you need:\n\n\nHow to build it: \nhttps://wiki.status.im/contributing/development/building-status/\n\n\nThe latest nightlies: \nhttp://artifacts.status.im:8081/artifactory/nightlies-local/\n\n\nIf you would like to help us with how to build for Linux and Windows, please do feel free - that would be really awesome to get everyone up to the same speed.", 
            "title": "User Guide"
        }, 
        {
            "location": "/getting-started/user-guide/#user-guide", 
            "text": "", 
            "title": "User Guide"
        }, 
        {
            "location": "/getting-started/user-guide/#setting-it-all-up", 
            "text": "Special thanks to  @cryptowanderer  for contributing this fantastic guide!  Welcome to Status! This is Ethereum, anywhere. Ethereum everywhere. A world computer in your pocket. It is so many cool and amazing things that is difficult to know where to start. Being entirely too overwhelmed with the awesomeness that is an Ethereum light client running on your mobile phone, I suppose we\u2019ll just begin at the beginning.  Once you have downloaded the app, installed it and opened it, it should take you into a chat with Console: a dApp that lives inside status and lets you set up your account and control all the important stuff (as well as a bunch of other rad features, which we will get to in good time).   As you can see, I have already been chatting a fair bit with Console (friends, yay!!). The UI concept here is that when someone sends an action message requesting (in this case) a password, or money, or a confirmation code etc., you can tap the blue block and it will insert the appropriate syntax to respond to that request, followed by your input.   One other thing to note is the \u2018Available\u2019 beneath \u2018Console\u2019 in the top left. This means that my phone has synced with the ropsten testnet (unbelievable right?!). I am running android 7.0 and am doing so over wifi. It took just under 40mins for me to sync, though there are varying reports coming in to our slack depending on phone, OS and network differences. Still, ~40min sync time on a mobile is just insane. Thanks Zsolt for the amazing  LES !   You can see that you can optionally give your phone number to help status sync with your existing contacts. This is not mandatory and the app will work fine without it. If you do provide it, please make sure to give your country code (so +27\u2026 for me) so that status can send you the confirmation message. Note that if you run into any issues, you can just shake your phone and this should bring up a screen that allows you to submit an error report directly to the status team. You can select from the options what you want to do, but generally it seems best to  Report a Problem :   You should be able to select a colour to indicate the severity of the issue on the second screen above. I really want to make sure that Jarrad, Carl and the crew are on their toes, so I have gone for red here. Hitting the forward button (top right) should take you to where the magic really happens:   Please note the  Take a screen recording  button in the bottom left. This is how the team prefers you to submit bug reports as it is enormously helpful with seeing exactly what went wrong and so providing insight into where to go to fix the issue. You can enter your email, take a video and go ahead and submit. At which point we issue you a massive thank you for being such a stellar alpha tester. Go you!", 
            "title": "Setting It All Up"
        }, 
        {
            "location": "/getting-started/user-guide/#actually-using-the-app", 
            "text": "OK, now that we have the setup out the way, we can get into the really fun stuff. Once you have generated your account with Console, you can open both the ropsten testnet faucet and the status test faucet to get some shweet test ether into your account so that you can go out and convince actual people to be your friends too. Please do not open an issue if this doesn\u2019t happen - we can\u2019t convince people to like you (even if you do use the best tech around).  To open both faucets, tap the hamburger menu with the blue dot to the left of the chat box:   In words, we tap the menu on the left, scroll down and select the faucet option and then select which testnet we want to get ether from. Repeat this twice to open both faucets and you should get a bit more ether a bit more quickly. Don\u2019t worry about the web3 stuff in the first screenshot - we\u2019ll get to that (who said you can\u2019t build suspense in a technical user guide?).  Seeing as we\u2019re now finished chatting to Console for the moment, we can hit the back button and this will take us into the Chats page:   Here you can see all the lovely people that you have been chatting to. It\u2019s really straightforward and intuitive, so behave as you normally would in WhatsApp or WeChat etc. Tapping a conversation will take you into it, and you can use the bottom three tabs to navigate through the Chats, Discover and Contacts screen. You can also just swipe right. Just do you.  There is another important dApp that lives here as well - your wallet. Selecting it should take you to a screen like this:   The main screen opens what is essentially an in-app browser that will show your main balance. You can scroll that screen down using the small down arrow at the top in the centre to see the actual transactions in a chat-like interface. As you can see, I am super rich - absolutely rolling in that test ether - and have sent some to Jarrad as mad props for building the app, and received some from Roland as a little test.  If you navigate back out of the wallet chat and swipe right, or select the Discover tab at the bottom, you will get to the Discover page:   Here you can see hashtags people are using and discover all the different conversations going on. Swipe right through the cards to see the most popular categories, or scroll down to see the most recent updates. If you want to make a message of your own appear here, you need to open your profile page and edit your status with the hashtag you want to see appear here. Start a meme or hop onto an existing one - it\u2019s all up to you. You can get to your profile page by tapping the little hamburger menu in the very top left of the app:   Don\u2019t stress about the  Settings  tab - that will be functional in a later release. Your profile page should look like the below. To edit it, hit the three dots in the top right:   Tap next to your name to edit that, tap your status to edit that and hit the pencil icon by the picture to upload your own. Remember to include that hashtag if you want it to appear on the Discover page.  Once that is all done and you\u2019ve broadcast a status for all the world to see, swipe right once more (or use the tabs for navigation) and you will get to the Contacts page. Here you will see the dApps that are currently living in status as well as all the wonderful people you have connected with:   These dApps all work in essentially the same way as the wallet - you can open a chat with them, which will direct you to an in app browser that displays whatever is appropriate for that app. There is a small down arrow at the top which you can scroll down to see any transactions that have occurred between you and the dApp. Directly from within status - signed, sealed and delivered, it all just works. Mind-boggling, I know.   If you close your app or otherwise have an issue, when you reopen it, you should be directed to  a screen which looks like the below. Select the account that belongs to you (in the case where you set up more than one) and then put in the appropriate password and you should get back to the chat screen:   If that doesn\u2019t work for you or your account doesn\u2019t appear like mine, hit the  Recover access  button at the bottom of the first screen and follow the prompts to input the 12 word passphrase console gave you when you first set stuff up and your password.  Happy sailing!", 
            "title": "Actually Using the App"
        }, 
        {
            "location": "/getting-started/user-guide/#for-the-adventurous", 
            "text": "We\u2019ve covered all the basic functionality as it stands, but there is so much more that you can do with status. Most of this stuff will only become available in the beta release or after, but developers around the world should be getting really excited to start building dApps to live alongside Flight Delays and Maker etc.   Though it is by no means complete yet, you can do a lot more than just set you account up using Console - it is, after all, a full dApp of its own. Go back to that chat and type  web3.  (the fullstop is important) and  web3.eth. :   You should be able to see a whole bunch of suggestions for the sorts of things you can do directly from Console, the most basic of which is  web3.eth.blockNumber  which will return the current block number on the ropsten testnet. If this doesn\u2019t blow your mind, I\u2019m not sure what will. There are, as I said, still improvements to be made here regarding technical things like retaining state between messages, but it will get there.  If you want to dive in even further and help develop the app, contribute some code or otherwise get involved in the technical side of things, here are the links you need:  How to build it:  https://wiki.status.im/contributing/development/building-status/  The latest nightlies:  http://artifacts.status.im:8081/artifactory/nightlies-local/  If you would like to help us with how to build for Linux and Windows, please do feel free - that would be really awesome to get everyone up to the same speed.", 
            "title": "For the Adventurous"
        }, 
        {
            "location": "/getting-started/faq/", 
            "text": "FAQ\n\n\nWhy a Messenger?\n\n\nWhen Carl \n Jarrad looked at how to achieve mass adoption for a client. We looked at things such as where the people are, how they behave on their devices, time spent on pc vs mobile - as of 2014 more time is spent on mobile than desktop, and of that time - a THIRD of it is spent within Instant Messengers.\n\n\nInstant Messengers have the highest retention rates, that is when you purchase an install, they become sticky and typically users won't immediately uninstall.\n\n\nThe average user lifetime sky rockets once their friends are involved. When you start thinking about this as a user base and how to connect that with Ethereum, things like payments and applications built ontop of Ethereum integrated into a converstional interface starts becoming like a clear path forward.\n\n\nUltimately we're building a hybrid browser and messenger for us to have the best chance to cast the widest net and focus on user acquisition, staying agnostic and as close as possible to the principles Ethereum embodies.\n\n\nDoes Status support DApps that have their own web page ?\n\n\nYes, we absolutely support DApps on their own webpage and are striving for SWARM support also. Chances are, if a DApp works in Mist or MetaMask it is likely to work in Status!\n\n\nOur goal is to be a DApp browser for Android \n iOS, in addition to this we'll support a Chat API if you wish to integrate within a chat context.\n\n\nIf your web-based DApp renders on mobile, trying using the \n!browse\n command inside a chat and navigating to your DApp URL! During our alpha release, DApp developers can also add their DApps as default contacts by following \nthese instructions\n, but in later releases these will be discoverable to uses through the Discover feature.\n\n\nCan your app be launched with a link?\n\n\nNot at the moment, the standard we will likely support is \nEIP67\n.\n\n\nDo I have to run go-ethereum myself or on server?\n\n\nStatus includes \ngo-ethereum\n and connects directly to the Ethereum network. All you need to do is run the Status app! This is possible to do with the new Light Client Protocol.\n\n\nWhen did you start coding and how you are funded?\n\n\nStatus is largely self-funded.  We've been working on it since prior Devcon1, and we were awarded a Devgrant to port EthereumJ to Android prior to that.\n\n\nEthereumJ has different goals, its developers intended for server use and had no interest in supporting the light client protocol, another large factor is we wanted largely a single codebase for multiple platforms, we had Java running on iOS and Android, we want unify the GUI but the means to do that (JavaFX) is really not suited to mobile devices.\n\n\nOur current approach allows us to get bleeding edge tech and stability of geth whilst maintaining a single codebase.\n\n\nI am new to Ethereum \n Blockchain. I would like to contribute to the project, where would you suggest I start?\n\n\nTo get up to speed with Ethereum, here are a few resources to get you started:\n\n\nEthdocs.org\n,\n\nEthereum.org\n,\n\nEthereum Stack Exchange\n, and\n\nEthereum on Youtube\n\n\nFor Status - please take a look under the \nContributing Section\n, and ask us about it \non Slack\n (we're friendly people!)\n\n\nI have a DApp that runs on Mist how can I test it in Status?\n\n\nSo each chat context has a command !browse - allowing users to access a webview (you can imagine this as a bit like a browser tab), so much in the same way as mist. In terms of integration/compatibility nothing is required on your end to do that if it already works in Mist.\n\n\nThat said, looking beyond the alpha, we'll have developer tooling, and a way for DApp developers to have profiles for theirs DApps (this then makes them discoverable through the 'Discover' feature), along with the Chat API for Developers who want to integrate through a conversational UI rather than (or in addition to) webview.\n\n\nWhat is the \"jail\" in your status-react code?\n\n\nWhen the Chat API is ready to use, your javascript code is executed in Otto VM  \nhttps://github.com/robertkrimen/otto\n  this is the same javascript engine \ngo-ethereum\n uses. That way your code is executed in a \"jail\" and shouldn't interfere with the rest of Status. At least, that's the theory, at the moment we have no implementation of the halting problem, but we will.\n\n\nFor web DApps, we rely on the webview to correctly jail javascript.\n\n\nWhen can we expect to see the Beta?\n\n\nThe first release of our alpha was at the very beginning of Q1 2017, beta will come end of Q1 or early Q2 2017 with developer tooling, bug fixes \n the ability for DApps to integrate within a chat context.\n\n\nIs it going to be for Android only?\n\n\nNo, we support Android \n iOS.\n\n\nIs it possible to install Status \n how can I test?\n\n\nAt the moment you have to \nbuild it yourself\n, we are just fixing some bugs before first alpha release to the early access subscribers which signed up on our website \nhttps://status.im\n - alternatively there are some binaries floating around the Slack now.\n\n\nSoon we'll have our alpha test on Google Play \n Testflight. Currently Status has been tested on:\n\n\n\n\nLG Nexus 5X\n\n\nSamsung Galaxy Nexus\n\n\nSamsung Galaxy A3\n\n\nSamsung Galaxy A5\n\n\nSamsung Galaxy S7 Edge\n\n\nMotorola G3\n\n\niPhone 5\n\n\niPhone 6S\n\n\niPhone 7\n\n\n\n\nWhat languages do you support?\n\n\nWe\u2019re currently supporting 30 languages\u200a\u2014\u200athis includes; English, \u5b98\u8a71, \u5b98\u8bdd, \u5ee3\u6771\u8a71, \u4e0a\u6d77\u8bdd, Nederlands, Fran\u00e7ais, Deutsch, \u0939\u093f\u0928\u094d\u0926\u0940, Magyar, Italiano, \u65e5\u672c\u8a9e, \ud55c\uad6d\uc5b4, Polski, Portugu\u00eas brasileiro, Portugu\u00eas europeu, Rom\u00e2n\u0103, Slovenski, Espa\u00f1ol, Espa\u00f1ol (Latin-America), Swahili, Svenska, Suisse fran\u00e7aise, Schweizerdeutsch, Svizzera Italiana, \u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22, T\u00fcrk\u00e7e, \u0440\u0443\u0441\u0441\u043a\u0438\u0439, \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430, \u0627\u064f\u0631\u062f\u064f\u0648 \n Ti\u1ebfng Vi\u1ec7t!\n\n\nIf you see a typo, mistranslation or something missing, don't hesitate to let us know \nvia the Status Slack\n, or fix it yourself using our \nTranslation Guide!\n\n\nWhat about all these permissions in the app?\n\n\nPermissions are always a hot topic for apps, we hate the way we\u2019re doing them too. The good news is it\u2019s only like this for alpha and in production we\u2019ll make permission usage on-demand. At the moment there\u2019s many moving parts and a bunch of react-native dependencies (and Instabug) which don\u2019t have code to ask on-demand. Thanks for understanding!\n\n\nContacts, SMS, Telephone\n\u200a\u2014\u200athese are for an optional step of phone contact synchronisation. We don\u2019t use them unless you tap on the phone sync request message.  \n\n\nLocation\n\u200a\u2014\u200aCurrently used for our toy !location command. Our aim is to provide this to DApps For things like sharing location with friends, ordering food, or self-driving cars.  \n\n\nMicrophone\n\u200a\u2014\u200aIn this version, we don\u2019t need it, it\u2019s there because we intended to send audio messages over Whisper, in practice this was a bad idea. We still intend to offer Audio messages in Beta so it\u2019s going to stay. It is also used in Instabug which we use to collect feedback.  \n\n\nStorage\n\u200a\u2014\u200aWe need a place to put the blockchain data.  \n\n\nCamera\n\u200a\u2014\u200aWe use this for setting your profile picture and for reading QR codes.  \n\n\nNice to know\n\n\n\n\n\n\n\n\nTables\n\n\nAre\n\n\nCool\n\n\n\n\n\n\n\n\n\n\ncol 3 is\n\n\nright-aligned\n\n\n$1600\n\n\n\n\n\n\ncol 2 is\n\n\ncentered\n\n\n$12\n\n\n\n\n\n\nzebra stripes\n\n\nare neat\n\n\n$1\n\n\n\n\n\n\n\n\nStatus:        https://status.im/\nStatus FAQ:    https://wiki.status.im/getting-started/faq/#faq\nStatus Blog:     https://blog.status.im/\nFacebook:     https://www.facebook.com/ethstatus\nTwitter:        https://twitter.com/ethstatus\nGithub:        https://github.com/status-im\nReddit:        https://www.reddit.com/r/statusim/\nYoutube:        https://www.youtube.com/statusim\nWiki:        https://wiki.status.im/\n\n\nWhere are the nightlies?\n\n\nHere you go!\n\nhttp://artifacts.status.im:8081/artifactory/nightlies-local/", 
            "title": "FAQ"
        }, 
        {
            "location": "/getting-started/faq/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/getting-started/faq/#why-a-messenger", 
            "text": "When Carl   Jarrad looked at how to achieve mass adoption for a client. We looked at things such as where the people are, how they behave on their devices, time spent on pc vs mobile - as of 2014 more time is spent on mobile than desktop, and of that time - a THIRD of it is spent within Instant Messengers.  Instant Messengers have the highest retention rates, that is when you purchase an install, they become sticky and typically users won't immediately uninstall.  The average user lifetime sky rockets once their friends are involved. When you start thinking about this as a user base and how to connect that with Ethereum, things like payments and applications built ontop of Ethereum integrated into a converstional interface starts becoming like a clear path forward.  Ultimately we're building a hybrid browser and messenger for us to have the best chance to cast the widest net and focus on user acquisition, staying agnostic and as close as possible to the principles Ethereum embodies.", 
            "title": "Why a Messenger?"
        }, 
        {
            "location": "/getting-started/faq/#does-status-support-dapps-that-have-their-own-web-page", 
            "text": "Yes, we absolutely support DApps on their own webpage and are striving for SWARM support also. Chances are, if a DApp works in Mist or MetaMask it is likely to work in Status!  Our goal is to be a DApp browser for Android   iOS, in addition to this we'll support a Chat API if you wish to integrate within a chat context.  If your web-based DApp renders on mobile, trying using the  !browse  command inside a chat and navigating to your DApp URL! During our alpha release, DApp developers can also add their DApps as default contacts by following  these instructions , but in later releases these will be discoverable to uses through the Discover feature.", 
            "title": "Does Status support DApps that have their own web page ?"
        }, 
        {
            "location": "/getting-started/faq/#can-your-app-be-launched-with-a-link", 
            "text": "Not at the moment, the standard we will likely support is  EIP67 .", 
            "title": "Can your app be launched with a link?"
        }, 
        {
            "location": "/getting-started/faq/#do-i-have-to-run-go-ethereum-myself-or-on-server", 
            "text": "Status includes  go-ethereum  and connects directly to the Ethereum network. All you need to do is run the Status app! This is possible to do with the new Light Client Protocol.", 
            "title": "Do I have to run go-ethereum myself or on server?"
        }, 
        {
            "location": "/getting-started/faq/#when-did-you-start-coding-and-how-you-are-funded", 
            "text": "Status is largely self-funded.  We've been working on it since prior Devcon1, and we were awarded a Devgrant to port EthereumJ to Android prior to that.  EthereumJ has different goals, its developers intended for server use and had no interest in supporting the light client protocol, another large factor is we wanted largely a single codebase for multiple platforms, we had Java running on iOS and Android, we want unify the GUI but the means to do that (JavaFX) is really not suited to mobile devices.  Our current approach allows us to get bleeding edge tech and stability of geth whilst maintaining a single codebase.", 
            "title": "When did you start coding and how you are funded?"
        }, 
        {
            "location": "/getting-started/faq/#i-am-new-to-ethereum-blockchain-i-would-like-to-contribute-to-the-project-where-would-you-suggest-i-start", 
            "text": "To get up to speed with Ethereum, here are a few resources to get you started:  Ethdocs.org , Ethereum.org , Ethereum Stack Exchange , and Ethereum on Youtube  For Status - please take a look under the  Contributing Section , and ask us about it  on Slack  (we're friendly people!)", 
            "title": "I am new to Ethereum &amp; Blockchain. I would like to contribute to the project, where would you suggest I start?"
        }, 
        {
            "location": "/getting-started/faq/#i-have-a-dapp-that-runs-on-mist-how-can-i-test-it-in-status", 
            "text": "So each chat context has a command !browse - allowing users to access a webview (you can imagine this as a bit like a browser tab), so much in the same way as mist. In terms of integration/compatibility nothing is required on your end to do that if it already works in Mist.  That said, looking beyond the alpha, we'll have developer tooling, and a way for DApp developers to have profiles for theirs DApps (this then makes them discoverable through the 'Discover' feature), along with the Chat API for Developers who want to integrate through a conversational UI rather than (or in addition to) webview.", 
            "title": "I have a DApp that runs on Mist how can I test it in Status?"
        }, 
        {
            "location": "/getting-started/faq/#what-is-the-jail-in-your-status-react-code", 
            "text": "When the Chat API is ready to use, your javascript code is executed in Otto VM   https://github.com/robertkrimen/otto   this is the same javascript engine  go-ethereum  uses. That way your code is executed in a \"jail\" and shouldn't interfere with the rest of Status. At least, that's the theory, at the moment we have no implementation of the halting problem, but we will.  For web DApps, we rely on the webview to correctly jail javascript.", 
            "title": "What is the \"jail\" in your status-react code?"
        }, 
        {
            "location": "/getting-started/faq/#when-can-we-expect-to-see-the-beta", 
            "text": "The first release of our alpha was at the very beginning of Q1 2017, beta will come end of Q1 or early Q2 2017 with developer tooling, bug fixes   the ability for DApps to integrate within a chat context.", 
            "title": "When can we expect to see the Beta?"
        }, 
        {
            "location": "/getting-started/faq/#is-it-going-to-be-for-android-only", 
            "text": "No, we support Android   iOS.", 
            "title": "Is it going to be for Android only?"
        }, 
        {
            "location": "/getting-started/faq/#is-it-possible-to-install-status-how-can-i-test", 
            "text": "At the moment you have to  build it yourself , we are just fixing some bugs before first alpha release to the early access subscribers which signed up on our website  https://status.im  - alternatively there are some binaries floating around the Slack now.  Soon we'll have our alpha test on Google Play   Testflight. Currently Status has been tested on:   LG Nexus 5X  Samsung Galaxy Nexus  Samsung Galaxy A3  Samsung Galaxy A5  Samsung Galaxy S7 Edge  Motorola G3  iPhone 5  iPhone 6S  iPhone 7", 
            "title": "Is it possible to install Status &amp; how can I test?"
        }, 
        {
            "location": "/getting-started/faq/#what-languages-do-you-support", 
            "text": "We\u2019re currently supporting 30 languages\u200a\u2014\u200athis includes; English, \u5b98\u8a71, \u5b98\u8bdd, \u5ee3\u6771\u8a71, \u4e0a\u6d77\u8bdd, Nederlands, Fran\u00e7ais, Deutsch, \u0939\u093f\u0928\u094d\u0926\u0940, Magyar, Italiano, \u65e5\u672c\u8a9e, \ud55c\uad6d\uc5b4, Polski, Portugu\u00eas brasileiro, Portugu\u00eas europeu, Rom\u00e2n\u0103, Slovenski, Espa\u00f1ol, Espa\u00f1ol (Latin-America), Swahili, Svenska, Suisse fran\u00e7aise, Schweizerdeutsch, Svizzera Italiana, \u0e20\u0e32\u0e29\u0e32\u0e44\u0e17\u0e22, T\u00fcrk\u00e7e, \u0440\u0443\u0441\u0441\u043a\u0438\u0439, \u0443\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430, \u0627\u064f\u0631\u062f\u064f\u0648   Ti\u1ebfng Vi\u1ec7t!  If you see a typo, mistranslation or something missing, don't hesitate to let us know  via the Status Slack , or fix it yourself using our  Translation Guide!", 
            "title": "What languages do you support?"
        }, 
        {
            "location": "/getting-started/faq/#what-about-all-these-permissions-in-the-app", 
            "text": "Permissions are always a hot topic for apps, we hate the way we\u2019re doing them too. The good news is it\u2019s only like this for alpha and in production we\u2019ll make permission usage on-demand. At the moment there\u2019s many moving parts and a bunch of react-native dependencies (and Instabug) which don\u2019t have code to ask on-demand. Thanks for understanding!  Contacts, SMS, Telephone \u200a\u2014\u200athese are for an optional step of phone contact synchronisation. We don\u2019t use them unless you tap on the phone sync request message.    Location \u200a\u2014\u200aCurrently used for our toy !location command. Our aim is to provide this to DApps For things like sharing location with friends, ordering food, or self-driving cars.    Microphone \u200a\u2014\u200aIn this version, we don\u2019t need it, it\u2019s there because we intended to send audio messages over Whisper, in practice this was a bad idea. We still intend to offer Audio messages in Beta so it\u2019s going to stay. It is also used in Instabug which we use to collect feedback.    Storage \u200a\u2014\u200aWe need a place to put the blockchain data.    Camera \u200a\u2014\u200aWe use this for setting your profile picture and for reading QR codes.", 
            "title": "What about all these permissions in the app?"
        }, 
        {
            "location": "/getting-started/faq/#nice-to-know", 
            "text": "Tables  Are  Cool      col 3 is  right-aligned  $1600    col 2 is  centered  $12    zebra stripes  are neat  $1     Status:        https://status.im/\nStatus FAQ:    https://wiki.status.im/getting-started/faq/#faq\nStatus Blog:     https://blog.status.im/\nFacebook:     https://www.facebook.com/ethstatus\nTwitter:        https://twitter.com/ethstatus\nGithub:        https://github.com/status-im\nReddit:        https://www.reddit.com/r/statusim/\nYoutube:        https://www.youtube.com/statusim\nWiki:        https://wiki.status.im/", 
            "title": "Nice to know"
        }, 
        {
            "location": "/getting-started/faq/#where-are-the-nightlies", 
            "text": "Here you go! http://artifacts.status.im:8081/artifactory/nightlies-local/", 
            "title": "Where are the nightlies?"
        }, 
        {
            "location": "/getting-started/code-of-conduct/", 
            "text": "Code of Conduct\n\n\nThis page outlines how you should govern yourself when participating in the Status community. For more practical tips and suggestions on how to help the project and contribute, please refer to either of these guides, \nHow to grow our Community\n or \nIntroduction for developers\n.  \n\n\nThe Code of Conduct serves to establish guidelines on how to conduct your behaviour. We are all responsible for maintaining and developing this shared environment.\n\nWe want to have a common productive, collaborative and socially responsible space. We hope that all our community members share our views and nurture this spirit and culture in their dealings with the Status community.  \n\n\nCommunity\n\n\nStatus is about showing respect and humanity for one another: the word itself captures the spirit of social esteem in a human community.\n\n\nWe want to grow a productive and agile place that can welcome new ideas in a complex field. We wish to improve every process in every development cycle and foster collaboration between groups with very different needs, interests and skills.\n\n\nWe gain strength from diversity, and actively seek participation from those who enhance it. This Code of Conduct exists to ensure that diverse groups collaborate to mutual advantage and enjoyment.  \n\n\nThis Code of Conduct governs how we behave in public or in private whenever the project will be judged by our actions. We expect it to be honoured by everyone who represents the project officially or informally, claims affiliation with the project, or participates directly.\n\n\nWe strive to:\n\n\n\n\n\n\nReciprocate\n \n\nNothing is more important than to show appreciation for every and anyones contributions, no matter if big or small. We show reciprocation by saying thank-you, contributing ourselves or paying it forward.\n\n\n\n\n\n\nBe considerate\n \n\nOur work will be used by other people, and we in turn depend on the work of others. Any decision we take will affect users and colleagues, and we should consider them when making decisions.  \n\n\nWhen somebody leaves or disengages from the project, we ask that they do so in a way that minimises disruption to the project. They should tell people they are leaving and take the proper steps to ensure that others can pick up where they left off.\n\n\n\n\n\n\nFeel free to ask\n\nIf there's something you don't know, do ask, questions are encouraged. Nobody is expected to be perfect in this community. Many newcomers just want to get acquinted with the project, so asking questions early avoids many problems later. The project is fast paced and ever evolving, so even people that have been around a long time might have questions.   \n\n\nThose who are asked or answer a general question should be responsive and helpful, directing people to the appropriate forums or channels is good, but answering the question is more important.\n\n\n\n\n\n\nBe respectful\n\nDisagreement is normal, they can be social or about technical details, but it is no excuse for poor manners. We work together to resolve conflict, assume good intentions and do our best to act in an empathic fashion. Allowing frustration to turn into personal attacks is not acceptable.  \n\n\nA community where people feel uncomfortable or threatened is not a productive one, so we will challenge prejudice or hostility that could jeopardise the participation of any person in the project.\n\n\n\n\n\n\nTake responsibility\n\nWe can all make mistakes; when we do, we take responsibility for them. If someone has been harmed or offended, we listen carefully and respectfully, and work together to resolve the problem, those involved in the project are expected to resolve disagreements constructively.  \n\n\nThe participants in the project should be able to accept and give constructive criticism, be it positive or negative, this is how we learn to work better.  \n\n\n\n\n\n\nBe collaborative\n\nWhat we together produce is a \ncomplex whole,\n made of \nmany parts\n and is the sum of many dreams. Collaboration between teams that each have their own goal and vision is essential. To be efficient and effective, and for the whole to be more than the sum of its parts, each team must make an effort to understand the system as a whole.  \n\n\nWherever possible, we work closely with projects in the same space and others in the Ethereum community to coordinate our efforts. We prefer to work transparently and involve interested parties as early as possible.   Collaboration at all levels improves the quality of our work and we value it both internally and externally.  \n\n\n\n\n\n\nDiscuss \n communicate\n\nOur community values discussion, information and decisiveness. We all lead by example, both in discussion and in action.\n\nWe want to encourage new participants to feel empowered to take action, to experiment when they feel like their innovation could improve the project and at times to lead.  \n\n\nSometimes not all of the data is available to everyone or a consensus on how to act can't be reached, but a decision must still be made. Not every participant will always agree on everything, but once a decision is made, it should be respected, accepted and work continued to achieve the common goal.\n\n\n\n\n\n\nGive credit where credit is due\n\nSome members may be more visible than others, but good ones use their visibility to highlight the great work of others.\n\n\n\n\n\n\nWe invite any- and everybody to participate in any aspect of the project. Our community is open and any responsibility can be carried by any contributor who demonstrates the required commitment, capacity and competence.\n\n\nLicense\n\n\nStatus.im is a \nFree Software\n project and the individuals and communities around it are its custodians.  We choose not to exclude others from using, understanding, modifying and distributing our work and in doing so we put our trust in one another to act in the best interests of the wider human community that Status.im is designed to serve.  This licence holds the developers to account,  in the knowledge that the software is a common trust and that it is a \nprivilege\n, a \nresponsibility\n to continue to develop it.\n\n\nThe Status Code of Conduct is licensed under the Creative Commons Attribution-Share Alike 3.0 license and has been adapted from the Ubuntu Code of Conduct v2.0. You may re-use it for your own project, and modify it as you wish, just please allow others to use your modifications and give credit to Ubuntu and the Status Projects!", 
            "title": "Code of Conduct"
        }, 
        {
            "location": "/getting-started/code-of-conduct/#code-of-conduct", 
            "text": "This page outlines how you should govern yourself when participating in the Status community. For more practical tips and suggestions on how to help the project and contribute, please refer to either of these guides,  How to grow our Community  or  Introduction for developers .    The Code of Conduct serves to establish guidelines on how to conduct your behaviour. We are all responsible for maintaining and developing this shared environment. \nWe want to have a common productive, collaborative and socially responsible space. We hope that all our community members share our views and nurture this spirit and culture in their dealings with the Status community.", 
            "title": "Code of Conduct"
        }, 
        {
            "location": "/getting-started/code-of-conduct/#community", 
            "text": "Status is about showing respect and humanity for one another: the word itself captures the spirit of social esteem in a human community.  We want to grow a productive and agile place that can welcome new ideas in a complex field. We wish to improve every process in every development cycle and foster collaboration between groups with very different needs, interests and skills.  We gain strength from diversity, and actively seek participation from those who enhance it. This Code of Conduct exists to ensure that diverse groups collaborate to mutual advantage and enjoyment.    This Code of Conduct governs how we behave in public or in private whenever the project will be judged by our actions. We expect it to be honoured by everyone who represents the project officially or informally, claims affiliation with the project, or participates directly.", 
            "title": "Community"
        }, 
        {
            "location": "/getting-started/code-of-conduct/#we-strive-to", 
            "text": "Reciprocate   \nNothing is more important than to show appreciation for every and anyones contributions, no matter if big or small. We show reciprocation by saying thank-you, contributing ourselves or paying it forward.    Be considerate   \nOur work will be used by other people, and we in turn depend on the work of others. Any decision we take will affect users and colleagues, and we should consider them when making decisions.    When somebody leaves or disengages from the project, we ask that they do so in a way that minimises disruption to the project. They should tell people they are leaving and take the proper steps to ensure that others can pick up where they left off.    Feel free to ask \nIf there's something you don't know, do ask, questions are encouraged. Nobody is expected to be perfect in this community. Many newcomers just want to get acquinted with the project, so asking questions early avoids many problems later. The project is fast paced and ever evolving, so even people that have been around a long time might have questions.     Those who are asked or answer a general question should be responsive and helpful, directing people to the appropriate forums or channels is good, but answering the question is more important.    Be respectful \nDisagreement is normal, they can be social or about technical details, but it is no excuse for poor manners. We work together to resolve conflict, assume good intentions and do our best to act in an empathic fashion. Allowing frustration to turn into personal attacks is not acceptable.    A community where people feel uncomfortable or threatened is not a productive one, so we will challenge prejudice or hostility that could jeopardise the participation of any person in the project.    Take responsibility \nWe can all make mistakes; when we do, we take responsibility for them. If someone has been harmed or offended, we listen carefully and respectfully, and work together to resolve the problem, those involved in the project are expected to resolve disagreements constructively.    The participants in the project should be able to accept and give constructive criticism, be it positive or negative, this is how we learn to work better.      Be collaborative \nWhat we together produce is a  complex whole,  made of  many parts  and is the sum of many dreams. Collaboration between teams that each have their own goal and vision is essential. To be efficient and effective, and for the whole to be more than the sum of its parts, each team must make an effort to understand the system as a whole.    Wherever possible, we work closely with projects in the same space and others in the Ethereum community to coordinate our efforts. We prefer to work transparently and involve interested parties as early as possible.   Collaboration at all levels improves the quality of our work and we value it both internally and externally.      Discuss   communicate \nOur community values discussion, information and decisiveness. We all lead by example, both in discussion and in action. \nWe want to encourage new participants to feel empowered to take action, to experiment when they feel like their innovation could improve the project and at times to lead.    Sometimes not all of the data is available to everyone or a consensus on how to act can't be reached, but a decision must still be made. Not every participant will always agree on everything, but once a decision is made, it should be respected, accepted and work continued to achieve the common goal.    Give credit where credit is due \nSome members may be more visible than others, but good ones use their visibility to highlight the great work of others.    We invite any- and everybody to participate in any aspect of the project. Our community is open and any responsibility can be carried by any contributor who demonstrates the required commitment, capacity and competence.", 
            "title": "We strive to:"
        }, 
        {
            "location": "/getting-started/code-of-conduct/#license", 
            "text": "Status.im is a  Free Software  project and the individuals and communities around it are its custodians.  We choose not to exclude others from using, understanding, modifying and distributing our work and in doing so we put our trust in one another to act in the best interests of the wider human community that Status.im is designed to serve.  This licence holds the developers to account,  in the knowledge that the software is a common trust and that it is a  privilege , a  responsibility  to continue to develop it.  The Status Code of Conduct is licensed under the Creative Commons Attribution-Share Alike 3.0 license and has been adapted from the Ubuntu Code of Conduct v2.0. You may re-use it for your own project, and modify it as you wish, just please allow others to use your modifications and give credit to Ubuntu and the Status Projects!", 
            "title": "License"
        }, 
        {
            "location": "/contributing/development/introduction/", 
            "text": "Introduction\n\n\nIn this post, you will learn what the two main languages used in Status are, how to learn them, how to build Status, \n finally how to find tasks to work on.\n\n\nStatus is largely written in two languages: Clojurescript \n Golang and builds on React Native for UI. I'll talk about the rational behind these design decisions and link to offsite resources on learning each of these technologies.\n\n\nReact Native\n\n\nStatus (formerly known as Syng) has always aspired to have a single, unified codebase for multi-platform development. This is not so easy to achieve, as many of the non-web-based solutions out there allow you to have a semi-single codebase, but you find yourself creating a lot of seperate logic for handling user interfaces on each platform - Status is 80% frontend code and this presents a problem. We tried Xamarin \n Java (EthereumJ was the first implementation we got running on Android \n iOS - via RoboVM), and we quickly discovered this problem.\n\n\nMobile apps built on web-based technologies, such as those done in Cordova, are great for short-term projects or mvp, but you will quickly run into performance issues on resource-limited devices and may need to rewrite you app. In our tests displaying webview DApps in a chat history with iFrames and all the other bells and whistles we wanted turned out to be a futile effort.\n\n\nThat limited our options to choosing between NativeScript \n React Native. We chose React Native because it is more mature and is being used in production for popular apps like \nFacebook\n, \nInstagram\n, \nAirbnb\n, \nBaidu\n \n \nDiscord\n. This gave us the impression that this framework was here to stay with many Fortune 500 companies invested in its continuance.\n\n\nAt this point all we had to do is merge Material \n iOS design into our unique look'and'feel so that we could minimise the amount of Android \n iOS specific code. Our amazing designer \nAndrei Mironov\n elegantly solved the rest of that puzzle.\n\n\nReact Native Learning Resources\n\n\nIf you would like to start learning React Native, check out these resources:\n\n\n\n\nUse React Native\n\n\nReact Native Docs\n\n\n\n\nAlthough you might want to continue reading and learn more about \nre-natal\n, \nre-frame\n \n \nreagent\n.\n\n\nClojurescript\n\n\n\u201cLisp is worth learning for the profound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days, even if you never actually use Lisp itself a lot.\u201d\n \u2014 \nEric Raymond\n.\n\n\nTo read more quotes on Lisp read \nLisp, made with secret alien technology\n.\n\n\n  \n\n\nThere's alot of resources online about why learning Lisps are so great. For us, it's largely about culture; we like the way Lispers think. We want functional programming, macros, homoiconic code and the flexibility that comes with a simple, unstructured language in which to think. The benefits of this become more apparent in later stage development, where functional language allows us to perform rewrites more easily, isolate many bugs to specific functions, as well as enforcing correct coding. Also, I prefer reading it.\n\n\nMoreover, with \nhiccup\n, working with React Native markup becomes a dream.\n\n\nClojurescript Learning Resources\n\n\nIf you would like to start learning Clojurescript, check out these resources:\n\n\n\n\nClojurescript FAQ (for JavaScript developers)\n\n\nClojurescript Community Resources\n\n\nClojurescript Unraveled Book (Free)\n\n\n/r/clojure\n \n \n/r/clojurescript\n\n\n\n\nGo\n\n\nOf all the Ethereum implementations \ngo-ethereum\n has received the most love and implements the newest and best features. Without \ngo-ethereum\n we couldn't use the light client protocol and Status would not be possible. We will also get access to Swarm the fastest. We consume \ngo-ethereum\n as a library in \nstatus-go\n.\n\n\n'Nough said.\n\n\nRe-natal\n\n\nre-natal is an invaluable tool to that automates the setup of your \nre-frame\n React Native for Android \n iOS, it includes \nfigwheel\n for easy development.\n\n\n\n\nre-natal \nREADME.md\n\n\n\n\nRe-frame\n\n\nre-frame is simple but expressive library for writing Single Page Applications in ClojureScript, using \nReagent\n. It is a functional framework for reactive 'MVC-style' applications. To learn more:\n\n\n\n\nre-frame \nREADME.md\n\n\nre-frame \ndocs\n\n\nA Noob's walkthrough of a re-frame Application\n\n\nThe Angular Phonecat tutorial in re-frame\n\n\n\n\nReagent\n\n\nReagent\n provides a minimalistic interface between ClojureScript and React. It allows you to define efficient React components using nothing but plain ClojureScript functions and data, that describe your UI using a Hiccup-like syntax.\nThe goal of Reagent is to make it possible to define arbitrarily complex UIs using just a couple of basic concepts, and to be fast enough by default that you rarely have to care about performance.\n\n\n\n\nReagent website\n\n\nReagent \nREADME.md\n\n\nBuilding Single Page Apps with Reagent\n\n\nYou should be using Figwheel \n Reagent. Here's why\n\n\nReagent Rocks\n\n\n\n\nBuilding Status\n\n\nRead our guide on how to Build Status\n\n\nFinding issues to work on\n\n\nSo by now you should have a general sense of the tech that goes into Status, managed to get Status built \n running and want to find something to sink your teeth into. \n\n\nThe best place to look for tasks to work on is our \nGithub Issues\n. We've labelled the tasks by our estimated difficulty.\n\n\nClick the labels below to see what is available.\n\n\nBeginner Issues\n\n\n\n\nThese are tickets we believe anyone willing to learn Clojurescript can handle. They involve minor UI and localisation changes. Even though they may seem minor that have a huge impact on the usability of Status.\n\n\nIntermediate Issues\n\n\n\n\nBeginner too easy and your Clojure-fu up to par? Time to level up!\nThese issues require a slightly deeper understanding of what Status is trying to accomplish; an understanding of Ethereum; and more communication and intimacy in the Slack as they are interdependent tasks. They involve things like setting up UI tests, fixing nastier bugs and making decisions that will have a real impact on how Status behaves and functions.\n\n\nAdvanced Issues\n\n\n\n\nThese issues are really there for people deeply into Ethereum, Core Contributors and people who believe in Status and have the skills to make magic happen.", 
            "title": "Developer Introduction"
        }, 
        {
            "location": "/contributing/development/introduction/#introduction", 
            "text": "In this post, you will learn what the two main languages used in Status are, how to learn them, how to build Status,   finally how to find tasks to work on.  Status is largely written in two languages: Clojurescript   Golang and builds on React Native for UI. I'll talk about the rational behind these design decisions and link to offsite resources on learning each of these technologies.", 
            "title": "Introduction"
        }, 
        {
            "location": "/contributing/development/introduction/#react-native", 
            "text": "Status (formerly known as Syng) has always aspired to have a single, unified codebase for multi-platform development. This is not so easy to achieve, as many of the non-web-based solutions out there allow you to have a semi-single codebase, but you find yourself creating a lot of seperate logic for handling user interfaces on each platform - Status is 80% frontend code and this presents a problem. We tried Xamarin   Java (EthereumJ was the first implementation we got running on Android   iOS - via RoboVM), and we quickly discovered this problem.  Mobile apps built on web-based technologies, such as those done in Cordova, are great for short-term projects or mvp, but you will quickly run into performance issues on resource-limited devices and may need to rewrite you app. In our tests displaying webview DApps in a chat history with iFrames and all the other bells and whistles we wanted turned out to be a futile effort.  That limited our options to choosing between NativeScript   React Native. We chose React Native because it is more mature and is being used in production for popular apps like  Facebook ,  Instagram ,  Airbnb ,  Baidu     Discord . This gave us the impression that this framework was here to stay with many Fortune 500 companies invested in its continuance.  At this point all we had to do is merge Material   iOS design into our unique look'and'feel so that we could minimise the amount of Android   iOS specific code. Our amazing designer  Andrei Mironov  elegantly solved the rest of that puzzle.", 
            "title": "React Native"
        }, 
        {
            "location": "/contributing/development/introduction/#react-native-learning-resources", 
            "text": "If you would like to start learning React Native, check out these resources:   Use React Native  React Native Docs   Although you might want to continue reading and learn more about  re-natal ,  re-frame     reagent .", 
            "title": "React Native Learning Resources"
        }, 
        {
            "location": "/contributing/development/introduction/#clojurescript", 
            "text": "\u201cLisp is worth learning for the profound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days, even if you never actually use Lisp itself a lot.\u201d  \u2014  Eric Raymond .  To read more quotes on Lisp read  Lisp, made with secret alien technology .      There's alot of resources online about why learning Lisps are so great. For us, it's largely about culture; we like the way Lispers think. We want functional programming, macros, homoiconic code and the flexibility that comes with a simple, unstructured language in which to think. The benefits of this become more apparent in later stage development, where functional language allows us to perform rewrites more easily, isolate many bugs to specific functions, as well as enforcing correct coding. Also, I prefer reading it.  Moreover, with  hiccup , working with React Native markup becomes a dream.", 
            "title": "Clojurescript"
        }, 
        {
            "location": "/contributing/development/introduction/#clojurescript-learning-resources", 
            "text": "If you would like to start learning Clojurescript, check out these resources:   Clojurescript FAQ (for JavaScript developers)  Clojurescript Community Resources  Clojurescript Unraveled Book (Free)  /r/clojure     /r/clojurescript", 
            "title": "Clojurescript Learning Resources"
        }, 
        {
            "location": "/contributing/development/introduction/#go", 
            "text": "Of all the Ethereum implementations  go-ethereum  has received the most love and implements the newest and best features. Without  go-ethereum  we couldn't use the light client protocol and Status would not be possible. We will also get access to Swarm the fastest. We consume  go-ethereum  as a library in  status-go .  'Nough said.", 
            "title": "Go"
        }, 
        {
            "location": "/contributing/development/introduction/#re-natal", 
            "text": "re-natal is an invaluable tool to that automates the setup of your  re-frame  React Native for Android   iOS, it includes  figwheel  for easy development.   re-natal  README.md", 
            "title": "Re-natal"
        }, 
        {
            "location": "/contributing/development/introduction/#re-frame", 
            "text": "re-frame is simple but expressive library for writing Single Page Applications in ClojureScript, using  Reagent . It is a functional framework for reactive 'MVC-style' applications. To learn more:   re-frame  README.md  re-frame  docs  A Noob's walkthrough of a re-frame Application  The Angular Phonecat tutorial in re-frame", 
            "title": "Re-frame"
        }, 
        {
            "location": "/contributing/development/introduction/#reagent", 
            "text": "Reagent  provides a minimalistic interface between ClojureScript and React. It allows you to define efficient React components using nothing but plain ClojureScript functions and data, that describe your UI using a Hiccup-like syntax.\nThe goal of Reagent is to make it possible to define arbitrarily complex UIs using just a couple of basic concepts, and to be fast enough by default that you rarely have to care about performance.   Reagent website  Reagent  README.md  Building Single Page Apps with Reagent  You should be using Figwheel   Reagent. Here's why  Reagent Rocks", 
            "title": "Reagent"
        }, 
        {
            "location": "/contributing/development/introduction/#building-status", 
            "text": "Read our guide on how to Build Status", 
            "title": "Building Status"
        }, 
        {
            "location": "/contributing/development/introduction/#finding-issues-to-work-on", 
            "text": "So by now you should have a general sense of the tech that goes into Status, managed to get Status built   running and want to find something to sink your teeth into.   The best place to look for tasks to work on is our  Github Issues . We've labelled the tasks by our estimated difficulty.  Click the labels below to see what is available.", 
            "title": "Finding issues to work on"
        }, 
        {
            "location": "/contributing/development/introduction/#beginner-issues", 
            "text": "These are tickets we believe anyone willing to learn Clojurescript can handle. They involve minor UI and localisation changes. Even though they may seem minor that have a huge impact on the usability of Status.", 
            "title": "Beginner Issues"
        }, 
        {
            "location": "/contributing/development/introduction/#intermediate-issues", 
            "text": "Beginner too easy and your Clojure-fu up to par? Time to level up!\nThese issues require a slightly deeper understanding of what Status is trying to accomplish; an understanding of Ethereum; and more communication and intimacy in the Slack as they are interdependent tasks. They involve things like setting up UI tests, fixing nastier bugs and making decisions that will have a real impact on how Status behaves and functions.", 
            "title": "Intermediate Issues"
        }, 
        {
            "location": "/contributing/development/introduction/#advanced-issues", 
            "text": "These issues are really there for people deeply into Ethereum, Core Contributors and people who believe in Status and have the skills to make magic happen.", 
            "title": "Advanced Issues"
        }, 
        {
            "location": "/community/how-to-grow-our-community/", 
            "text": "Growing our Community\n\n\nThis is a list of practical tips and suggestions on how you can take part in, help to strengthen and grow our community. \n\n\nIf you haven\u2019t done so yet, please read our \nMission and Core Values\n and ensure you follow our \nCode of Conduct\n, as these are closely aligned.\n\n\nHow to Get Involved\n\n\n\n\n\n\nAt the moment much of the community communication takes place on slack. A first step to getting involved can be as simple as joining \nour Slack\n and saying \u201chi\u201d (we're friendly people!).\n\n\n\n\n\n\nTake a look around the Slack channels, where you will find #dev-status, #dapp-chat, #lll etc.\n\n\n\n\n\n\nWhen you get to know people in the community who have interests or skills then let them know about or invite them to join the channels that play to their strengths.\n\n\n\n\n\n\nIf you think there is a need for a channel (but you're unsure) then please drop in to #channel-manager and make a proposal: \nMake sure that the channel name is easy to understand\n. The description should help others make a quick decision which channels they should join.\n\n\n\n\n\n\nHighlighting \n Managing Needs\n\n\n\n\n\n\nShare your ideas on how we can make the list of tasks and needed contributions more easily visible. The more accessible and manageable tasks become to the community the better.\n\n\n\n\n\n\nSimple requests can be addressed by individual people, long complex tasks may require a handful of people to complete, so encourage and help create bands of people to accomplish those.\n\n\n\n\n\n\nIf you know someone who would be great for a task, let them know! Don't pressure them if they are too busy.   \n\n\n\n\n\n\nDo your best to keep tasks as specific as possible, work to create clear goals.  Offer people specific and challenging goals that suit them, and keep them accountable in a friendly, non-pushy manner.\n\n\n\n\n\n\nGive clear feedback, and challenges that exercise people\u2019s skills to their limits.\n\n\n\n\n\n\nHow can we improve our tools for finding and tracking work that needs to be done?  The easier it is for everyone to see what needs to be done, the easier it is to contribute \u2013 If you have a suggestion then let everyone know your ideas!\n\n\n\n\n\n\nIf you are prominent in the community it is your duty to more frequently ask people if they are available for tasks.\n\n\n\n\n\n\nCulture\n\n\n\n\n\n\nStatus is focused on the \nEthereum Public Blockchain\n.  We want to retain and enhance the collaborative culture which has driven the creation of Ethereum itself, but we aim to approach our ideals of open participation with a level of pragmatism and we recognise that there is also a place in the world for private Blockchains.\n\n\n\n\n\n\nPeople are more willing to contribute to their community when they see that others are contributing too, and that their own contributions are useful and valued.\n\n\n\n\n\n\nAlways communicate the benefits of contribution, it will positively impact everyone in the community and increase the numner of people who will care, and perhaps contribute.\n\n\n\n\n\n\nDevelopment will take as long as it has to. While we all recognise this, we encourage clear goals, aligned with \"soft deadlines\" which will help encourage and focus contribution.\n\n\n\n\n\n\nOur community is a place where friendships develop, and perhaps occasional disagreements crop up too.  Just remember that we're all human, and it will be easier and more fun if we treat each other with respect.\n\n\n\n\n\n\nRemember, we're all good at different things and in different ways; even the best of us make mistakes.\n\n\n\n\n\n\nNever be silent about positive feedback!  If things are going well, let people know! Good feelings will enhance peoples motivation.\n\n\n\n\n\n\nMake an effort to become familiar with anyone who is contributing to the project, and get to know them over time.\n\n\n\n\n\n\nGratitude \n Reciprocity\n\n\n\n\n\n\nThink of ways you can encourage people to commit to contributing to the community on a long term basis. Whether that's taking an interest in someone, highlighting a task they might find interesting or even reminding them how we appreciate their accomplishments. In doing so we can raise everyone\u2019s willingness to keep this project alive. \n\n\n\n\n\n\nStart by acknowledging each other, whether that's welcoming people to the community or thanking them for their contributions.\n\n\n\n\n\n\nFree Software communities like ours thrive on reciprocity. When you contribute to the community you encourage other people to contribute too!  The way you contribute will help to shape the culture of the entire community, as the contributions you make influence the contributions of others.\n\n\n\n\n\n\nOffer more frequent feedback on tasks \n contributions that have a definate goal.\n\n\n\n\n\n\nGive constructive feedback on people\u2019s performance, and if they like competition - encourage friendly competition with others.\n\n\n\n\n\n\nNegative feedback can be helpful too.  We encourage \nconstructive\n criticism and friendly debate, as long as it remains \nfriendly\n.\n\n\n\n\n\n\nFind other ways to reward contributors, either through your own words, actions or material.\n\n\n\n\n\n\nActively highlight and communicate your mistakes \nand\n accomplishments, be accepting of those who do. The faster mistakes are discovered the faster we can solve them, and the faster we can praise your accomplishments.\n\n\n\n\n\n\nAny rewards should not be based on tasks but rather on consistent performance. Rewards should be impromptu.\n\n\n\n\n\n\nAdding task-contingent rewards (for doing or finishing a task) to an interesting task causes people to be less interested and successful in the task. (This effect is larger for monetary rewards than for prizes, status rewards and charitable donations.)\n\n\n\n\n\n\nConversation\n\n\n\n\n\n\nIf you have something you share that you think aligns with the general interests of the community, share it in the #status \nSlack\n channel.\n\n\n\n\n\n\nGoing off-topic is okay! But try and keep your conversations in their most appropriate #channel.\n\n\n\n\n\n\nHaving a custom profile picture allows other people to recognise you. If you like, show your face! It comes in handy when developing friendships or finding each other A.F.K. \n\n\n\n\n\n\nIf you see any work that involves Status, whether it's a blog post, a contribution, someone talking about Status in another chat - let everyone know!\n\n\n\n\n\n\nHow can we generate and show our metrics to different audiences?  Information like on how we're growing, both in absolute numbers and as percentages!\n\n\n\n\n\n\nLook at ways other successful communities are working, see if we can find similarities or ways we can be better and talk about it.\n\n\n\n\n\n\nIf you see any publicity and endorsements on Status, let people know!", 
            "title": "Grow our Community"
        }, 
        {
            "location": "/community/how-to-grow-our-community/#growing-our-community", 
            "text": "This is a list of practical tips and suggestions on how you can take part in, help to strengthen and grow our community.   If you haven\u2019t done so yet, please read our  Mission and Core Values  and ensure you follow our  Code of Conduct , as these are closely aligned.", 
            "title": "Growing our Community"
        }, 
        {
            "location": "/community/how-to-grow-our-community/#how-to-get-involved", 
            "text": "At the moment much of the community communication takes place on slack. A first step to getting involved can be as simple as joining  our Slack  and saying \u201chi\u201d (we're friendly people!).    Take a look around the Slack channels, where you will find #dev-status, #dapp-chat, #lll etc.    When you get to know people in the community who have interests or skills then let them know about or invite them to join the channels that play to their strengths.    If you think there is a need for a channel (but you're unsure) then please drop in to #channel-manager and make a proposal:  Make sure that the channel name is easy to understand . The description should help others make a quick decision which channels they should join.", 
            "title": "How to Get Involved"
        }, 
        {
            "location": "/community/how-to-grow-our-community/#highlighting-managing-needs", 
            "text": "Share your ideas on how we can make the list of tasks and needed contributions more easily visible. The more accessible and manageable tasks become to the community the better.    Simple requests can be addressed by individual people, long complex tasks may require a handful of people to complete, so encourage and help create bands of people to accomplish those.    If you know someone who would be great for a task, let them know! Don't pressure them if they are too busy.       Do your best to keep tasks as specific as possible, work to create clear goals.  Offer people specific and challenging goals that suit them, and keep them accountable in a friendly, non-pushy manner.    Give clear feedback, and challenges that exercise people\u2019s skills to their limits.    How can we improve our tools for finding and tracking work that needs to be done?  The easier it is for everyone to see what needs to be done, the easier it is to contribute \u2013 If you have a suggestion then let everyone know your ideas!    If you are prominent in the community it is your duty to more frequently ask people if they are available for tasks.", 
            "title": "Highlighting &amp; Managing Needs"
        }, 
        {
            "location": "/community/how-to-grow-our-community/#culture", 
            "text": "Status is focused on the  Ethereum Public Blockchain .  We want to retain and enhance the collaborative culture which has driven the creation of Ethereum itself, but we aim to approach our ideals of open participation with a level of pragmatism and we recognise that there is also a place in the world for private Blockchains.    People are more willing to contribute to their community when they see that others are contributing too, and that their own contributions are useful and valued.    Always communicate the benefits of contribution, it will positively impact everyone in the community and increase the numner of people who will care, and perhaps contribute.    Development will take as long as it has to. While we all recognise this, we encourage clear goals, aligned with \"soft deadlines\" which will help encourage and focus contribution.    Our community is a place where friendships develop, and perhaps occasional disagreements crop up too.  Just remember that we're all human, and it will be easier and more fun if we treat each other with respect.    Remember, we're all good at different things and in different ways; even the best of us make mistakes.    Never be silent about positive feedback!  If things are going well, let people know! Good feelings will enhance peoples motivation.    Make an effort to become familiar with anyone who is contributing to the project, and get to know them over time.", 
            "title": "Culture"
        }, 
        {
            "location": "/community/how-to-grow-our-community/#gratitude-reciprocity", 
            "text": "Think of ways you can encourage people to commit to contributing to the community on a long term basis. Whether that's taking an interest in someone, highlighting a task they might find interesting or even reminding them how we appreciate their accomplishments. In doing so we can raise everyone\u2019s willingness to keep this project alive.     Start by acknowledging each other, whether that's welcoming people to the community or thanking them for their contributions.    Free Software communities like ours thrive on reciprocity. When you contribute to the community you encourage other people to contribute too!  The way you contribute will help to shape the culture of the entire community, as the contributions you make influence the contributions of others.    Offer more frequent feedback on tasks   contributions that have a definate goal.    Give constructive feedback on people\u2019s performance, and if they like competition - encourage friendly competition with others.    Negative feedback can be helpful too.  We encourage  constructive  criticism and friendly debate, as long as it remains  friendly .    Find other ways to reward contributors, either through your own words, actions or material.    Actively highlight and communicate your mistakes  and  accomplishments, be accepting of those who do. The faster mistakes are discovered the faster we can solve them, and the faster we can praise your accomplishments.    Any rewards should not be based on tasks but rather on consistent performance. Rewards should be impromptu.    Adding task-contingent rewards (for doing or finishing a task) to an interesting task causes people to be less interested and successful in the task. (This effect is larger for monetary rewards than for prizes, status rewards and charitable donations.)", 
            "title": "Gratitude &amp; Reciprocity"
        }, 
        {
            "location": "/community/how-to-grow-our-community/#conversation", 
            "text": "If you have something you share that you think aligns with the general interests of the community, share it in the #status  Slack  channel.    Going off-topic is okay! But try and keep your conversations in their most appropriate #channel.    Having a custom profile picture allows other people to recognise you. If you like, show your face! It comes in handy when developing friendships or finding each other A.F.K.     If you see any work that involves Status, whether it's a blog post, a contribution, someone talking about Status in another chat - let everyone know!    How can we generate and show our metrics to different audiences?  Information like on how we're growing, both in absolute numbers and as percentages!    Look at ways other successful communities are working, see if we can find similarities or ways we can be better and talk about it.    If you see any publicity and endorsements on Status, let people know!", 
            "title": "Conversation"
        }, 
        {
            "location": "/contributing/development/introduction/", 
            "text": "Introduction\n\n\nIn this post, you will learn what the two main languages used in Status are, how to learn them, how to build Status, \n finally how to find tasks to work on.\n\n\nStatus is largely written in two languages: Clojurescript \n Golang and builds on React Native for UI. I'll talk about the rational behind these design decisions and link to offsite resources on learning each of these technologies.\n\n\nReact Native\n\n\nStatus (formerly known as Syng) has always aspired to have a single, unified codebase for multi-platform development. This is not so easy to achieve, as many of the non-web-based solutions out there allow you to have a semi-single codebase, but you find yourself creating a lot of seperate logic for handling user interfaces on each platform - Status is 80% frontend code and this presents a problem. We tried Xamarin \n Java (EthereumJ was the first implementation we got running on Android \n iOS - via RoboVM), and we quickly discovered this problem.\n\n\nMobile apps built on web-based technologies, such as those done in Cordova, are great for short-term projects or mvp, but you will quickly run into performance issues on resource-limited devices and may need to rewrite you app. In our tests displaying webview DApps in a chat history with iFrames and all the other bells and whistles we wanted turned out to be a futile effort.\n\n\nThat limited our options to choosing between NativeScript \n React Native. We chose React Native because it is more mature and is being used in production for popular apps like \nFacebook\n, \nInstagram\n, \nAirbnb\n, \nBaidu\n \n \nDiscord\n. This gave us the impression that this framework was here to stay with many Fortune 500 companies invested in its continuance.\n\n\nAt this point all we had to do is merge Material \n iOS design into our unique look'and'feel so that we could minimise the amount of Android \n iOS specific code. Our amazing designer \nAndrei Mironov\n elegantly solved the rest of that puzzle.\n\n\nReact Native Learning Resources\n\n\nIf you would like to start learning React Native, check out these resources:\n\n\n\n\nUse React Native\n\n\nReact Native Docs\n\n\n\n\nAlthough you might want to continue reading and learn more about \nre-natal\n, \nre-frame\n \n \nreagent\n.\n\n\nClojurescript\n\n\n\u201cLisp is worth learning for the profound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days, even if you never actually use Lisp itself a lot.\u201d\n \u2014 \nEric Raymond\n.\n\n\nTo read more quotes on Lisp read \nLisp, made with secret alien technology\n.\n\n\n  \n\n\nThere's alot of resources online about why learning Lisps are so great. For us, it's largely about culture; we like the way Lispers think. We want functional programming, macros, homoiconic code and the flexibility that comes with a simple, unstructured language in which to think. The benefits of this become more apparent in later stage development, where functional language allows us to perform rewrites more easily, isolate many bugs to specific functions, as well as enforcing correct coding. Also, I prefer reading it.\n\n\nMoreover, with \nhiccup\n, working with React Native markup becomes a dream.\n\n\nClojurescript Learning Resources\n\n\nIf you would like to start learning Clojurescript, check out these resources:\n\n\n\n\nClojurescript FAQ (for JavaScript developers)\n\n\nClojurescript Community Resources\n\n\nClojurescript Unraveled Book (Free)\n\n\n/r/clojure\n \n \n/r/clojurescript\n\n\n\n\nGo\n\n\nOf all the Ethereum implementations \ngo-ethereum\n has received the most love and implements the newest and best features. Without \ngo-ethereum\n we couldn't use the light client protocol and Status would not be possible. We will also get access to Swarm the fastest. We consume \ngo-ethereum\n as a library in \nstatus-go\n.\n\n\n'Nough said.\n\n\nRe-natal\n\n\nre-natal is an invaluable tool to that automates the setup of your \nre-frame\n React Native for Android \n iOS, it includes \nfigwheel\n for easy development.\n\n\n\n\nre-natal \nREADME.md\n\n\n\n\nRe-frame\n\n\nre-frame is simple but expressive library for writing Single Page Applications in ClojureScript, using \nReagent\n. It is a functional framework for reactive 'MVC-style' applications. To learn more:\n\n\n\n\nre-frame \nREADME.md\n\n\nre-frame \ndocs\n\n\nA Noob's walkthrough of a re-frame Application\n\n\nThe Angular Phonecat tutorial in re-frame\n\n\n\n\nReagent\n\n\nReagent\n provides a minimalistic interface between ClojureScript and React. It allows you to define efficient React components using nothing but plain ClojureScript functions and data, that describe your UI using a Hiccup-like syntax.\nThe goal of Reagent is to make it possible to define arbitrarily complex UIs using just a couple of basic concepts, and to be fast enough by default that you rarely have to care about performance.\n\n\n\n\nReagent website\n\n\nReagent \nREADME.md\n\n\nBuilding Single Page Apps with Reagent\n\n\nYou should be using Figwheel \n Reagent. Here's why\n\n\nReagent Rocks\n\n\n\n\nBuilding Status\n\n\nRead our guide on how to Build Status\n\n\nFinding issues to work on\n\n\nSo by now you should have a general sense of the tech that goes into Status, managed to get Status built \n running and want to find something to sink your teeth into. \n\n\nThe best place to look for tasks to work on is our \nGithub Issues\n. We've labelled the tasks by our estimated difficulty.\n\n\nClick the labels below to see what is available.\n\n\nBeginner Issues\n\n\n\n\nThese are tickets we believe anyone willing to learn Clojurescript can handle. They involve minor UI and localisation changes. Even though they may seem minor that have a huge impact on the usability of Status.\n\n\nIntermediate Issues\n\n\n\n\nBeginner too easy and your Clojure-fu up to par? Time to level up!\nThese issues require a slightly deeper understanding of what Status is trying to accomplish; an understanding of Ethereum; and more communication and intimacy in the Slack as they are interdependent tasks. They involve things like setting up UI tests, fixing nastier bugs and making decisions that will have a real impact on how Status behaves and functions.\n\n\nAdvanced Issues\n\n\n\n\nThese issues are really there for people deeply into Ethereum, Core Contributors and people who believe in Status and have the skills to make magic happen.", 
            "title": "Introduction"
        }, 
        {
            "location": "/contributing/development/introduction/#introduction", 
            "text": "In this post, you will learn what the two main languages used in Status are, how to learn them, how to build Status,   finally how to find tasks to work on.  Status is largely written in two languages: Clojurescript   Golang and builds on React Native for UI. I'll talk about the rational behind these design decisions and link to offsite resources on learning each of these technologies.", 
            "title": "Introduction"
        }, 
        {
            "location": "/contributing/development/introduction/#react-native", 
            "text": "Status (formerly known as Syng) has always aspired to have a single, unified codebase for multi-platform development. This is not so easy to achieve, as many of the non-web-based solutions out there allow you to have a semi-single codebase, but you find yourself creating a lot of seperate logic for handling user interfaces on each platform - Status is 80% frontend code and this presents a problem. We tried Xamarin   Java (EthereumJ was the first implementation we got running on Android   iOS - via RoboVM), and we quickly discovered this problem.  Mobile apps built on web-based technologies, such as those done in Cordova, are great for short-term projects or mvp, but you will quickly run into performance issues on resource-limited devices and may need to rewrite you app. In our tests displaying webview DApps in a chat history with iFrames and all the other bells and whistles we wanted turned out to be a futile effort.  That limited our options to choosing between NativeScript   React Native. We chose React Native because it is more mature and is being used in production for popular apps like  Facebook ,  Instagram ,  Airbnb ,  Baidu     Discord . This gave us the impression that this framework was here to stay with many Fortune 500 companies invested in its continuance.  At this point all we had to do is merge Material   iOS design into our unique look'and'feel so that we could minimise the amount of Android   iOS specific code. Our amazing designer  Andrei Mironov  elegantly solved the rest of that puzzle.", 
            "title": "React Native"
        }, 
        {
            "location": "/contributing/development/introduction/#react-native-learning-resources", 
            "text": "If you would like to start learning React Native, check out these resources:   Use React Native  React Native Docs   Although you might want to continue reading and learn more about  re-natal ,  re-frame     reagent .", 
            "title": "React Native Learning Resources"
        }, 
        {
            "location": "/contributing/development/introduction/#clojurescript", 
            "text": "\u201cLisp is worth learning for the profound enlightenment experience you will have when you finally get it; that experience will make you a better programmer for the rest of your days, even if you never actually use Lisp itself a lot.\u201d  \u2014  Eric Raymond .  To read more quotes on Lisp read  Lisp, made with secret alien technology .      There's alot of resources online about why learning Lisps are so great. For us, it's largely about culture; we like the way Lispers think. We want functional programming, macros, homoiconic code and the flexibility that comes with a simple, unstructured language in which to think. The benefits of this become more apparent in later stage development, where functional language allows us to perform rewrites more easily, isolate many bugs to specific functions, as well as enforcing correct coding. Also, I prefer reading it.  Moreover, with  hiccup , working with React Native markup becomes a dream.", 
            "title": "Clojurescript"
        }, 
        {
            "location": "/contributing/development/introduction/#clojurescript-learning-resources", 
            "text": "If you would like to start learning Clojurescript, check out these resources:   Clojurescript FAQ (for JavaScript developers)  Clojurescript Community Resources  Clojurescript Unraveled Book (Free)  /r/clojure     /r/clojurescript", 
            "title": "Clojurescript Learning Resources"
        }, 
        {
            "location": "/contributing/development/introduction/#go", 
            "text": "Of all the Ethereum implementations  go-ethereum  has received the most love and implements the newest and best features. Without  go-ethereum  we couldn't use the light client protocol and Status would not be possible. We will also get access to Swarm the fastest. We consume  go-ethereum  as a library in  status-go .  'Nough said.", 
            "title": "Go"
        }, 
        {
            "location": "/contributing/development/introduction/#re-natal", 
            "text": "re-natal is an invaluable tool to that automates the setup of your  re-frame  React Native for Android   iOS, it includes  figwheel  for easy development.   re-natal  README.md", 
            "title": "Re-natal"
        }, 
        {
            "location": "/contributing/development/introduction/#re-frame", 
            "text": "re-frame is simple but expressive library for writing Single Page Applications in ClojureScript, using  Reagent . It is a functional framework for reactive 'MVC-style' applications. To learn more:   re-frame  README.md  re-frame  docs  A Noob's walkthrough of a re-frame Application  The Angular Phonecat tutorial in re-frame", 
            "title": "Re-frame"
        }, 
        {
            "location": "/contributing/development/introduction/#reagent", 
            "text": "Reagent  provides a minimalistic interface between ClojureScript and React. It allows you to define efficient React components using nothing but plain ClojureScript functions and data, that describe your UI using a Hiccup-like syntax.\nThe goal of Reagent is to make it possible to define arbitrarily complex UIs using just a couple of basic concepts, and to be fast enough by default that you rarely have to care about performance.   Reagent website  Reagent  README.md  Building Single Page Apps with Reagent  You should be using Figwheel   Reagent. Here's why  Reagent Rocks", 
            "title": "Reagent"
        }, 
        {
            "location": "/contributing/development/introduction/#building-status", 
            "text": "Read our guide on how to Build Status", 
            "title": "Building Status"
        }, 
        {
            "location": "/contributing/development/introduction/#finding-issues-to-work-on", 
            "text": "So by now you should have a general sense of the tech that goes into Status, managed to get Status built   running and want to find something to sink your teeth into.   The best place to look for tasks to work on is our  Github Issues . We've labelled the tasks by our estimated difficulty.  Click the labels below to see what is available.", 
            "title": "Finding issues to work on"
        }, 
        {
            "location": "/contributing/development/introduction/#beginner-issues", 
            "text": "These are tickets we believe anyone willing to learn Clojurescript can handle. They involve minor UI and localisation changes. Even though they may seem minor that have a huge impact on the usability of Status.", 
            "title": "Beginner Issues"
        }, 
        {
            "location": "/contributing/development/introduction/#intermediate-issues", 
            "text": "Beginner too easy and your Clojure-fu up to par? Time to level up!\nThese issues require a slightly deeper understanding of what Status is trying to accomplish; an understanding of Ethereum; and more communication and intimacy in the Slack as they are interdependent tasks. They involve things like setting up UI tests, fixing nastier bugs and making decisions that will have a real impact on how Status behaves and functions.", 
            "title": "Intermediate Issues"
        }, 
        {
            "location": "/contributing/development/introduction/#advanced-issues", 
            "text": "These issues are really there for people deeply into Ethereum, Core Contributors and people who believe in Status and have the skills to make magic happen.", 
            "title": "Advanced Issues"
        }, 
        {
            "location": "/contributing/development/building-status/", 
            "text": "Building Status\n\n\nThis document is the entry point for developers of Status. This guide is for anyone who is interested in building, developing, debugging or submitting a bug report, pull request or contributing to Status with code.\n\n\nThis guide is written with OS X in mind.\n\n\nBuild and Test\n\n\nRequirements\n\n\n\n\nHomebrew\n + \nbrew update\n (optional, for OS X) + \nbrew tap caskroom/cask\n. For Windows use \nChocolatey\n.\n\n\nNode \n NPM\n \nbrew install node watchman\n\n\nLein\n \nbrew install leiningen\n\n\nreact-native\n \nnpm install -g react-native-cli\n\n\nLatest JDK\n \nbrew cask install java\n\n\nAndroid SDK with build tools version 23.0.1 [Mac] \nbrew cask install android-sdk\n or \nWindows/Linux\n\n\nGenymotion\n (optional, you may use an Android Virtual Device or real device)\n\n\nSetup Android Development Environment / Simulator\n\n\nGIT over SSH, please add public key to Github\n\n\nMaven\n \nbrew install maven\n\n\nFor Windows, \nRuby\n \nchoco install ruby\n\n\nCocoapods\n \nsudo gem install cocoapods\n.\n\n\n\n\nWindows-specific Setup Notes\n\n\nSetting up a development instance in Windows requires some tweaks. Consider the following before attempting the following sections:\n\n\n\n\nMake sure you run everything in a elevated command prompt (Right-click a link to Cmd.exe or Cygwin and click 'Run as Administrator')\n\n\nDo not use the ./re-natal symlink. Write your own \nre-natal.sh\n script that uses full relative paths, give it execution permissions with \nchmod +x\n, and use it instead. Script:\n\n\n\n\n#!/usr/bin/env node\n\nrequire('coffee-script/register');\nrequire('./node_modules/re-natal/index.js');\n\n\n\n\n\n\nIn the root \npackage.json\n edit \n\"./postinstall.sh\"\n to \n\"postinstall.sh\"\n\n\nAny \nnpm install\n commands (except for \nnpm install -g\n global commands) should be done as follows, to avoid windows symlink problems: \nnpm install --no-bin-links\n\n\nDo not use Cygwin for \nnpm install\n commands, use cmd.exe.\n\n\nReact-native is not bug-free. If you run into an error like \nerror: bundling: UnableToResolveError: Unable to resolve module...\n, the guaranteed solution is to manually edit the \nrequire()\n statements to the full relative path. E.g. \n(crypt = require('crypto'))\n becomes \n(crypt = require('../../../../node_modules/crypto/package.json'))\n.\n\n\n\n\nDependencies \n Setup\n\n\n$ git clone git@github.com:status-im/status-react.git -b master \n cd status-react\n# or\n$ git clone git@github.com:status-im/status-react.git -b develop \n cd status-react\n\n$ lein deps \n npm install \n ./re-natal deps \n lein generate-externs \n ./re-natal use-figwheel \n lein re-frisk use-re-natal \n ./re-natal enable-source-maps\n$ mvn -f modules/react-native-status/ios/RCTStatus dependency:unpack\n$ cd ios \n pod install \n cd ..\n\n\n\nBuilding Status for Release\n\n\n# fill in store file properties in android/gradle.properties\n$ lein prod-build\n$ react-native run-android --variant=release\n# for iOS, build in Xcode\n\n\n\nBuilding Status for Development\n\n\n$ lein prod-build\n\n$ ./re-natal use-android-device \ndevice\n # (genymotion, real or avd)\n# or\n$ ./re-natal use-ios-device \ndevice\n # (simulator or real)\n\n$ ./re-natal use-figwheel\n\n# new tab, run figwheel REPL\n$ BUILD_IDS=\"ios,android\" lein repl\n\n# new tab, run react native packager\n$ react-native start\n\n# FOR ANDROID\n# new tab, enable communication to react-native, figwheel and re-frisk debugging\n$ adb reverse tcp:8081 tcp:8081\n$ adb reverse tcp:3449 tcp:3449\n$ adb reverse tcp:4567 tcp:4567\n$ react-native run-android\n\n# FOR IOS\n$ react-native run-ios\n\n\n\nAccess Geth on Device\n\n\nadb forward tcp:8545 tcp:8545\nbuild/bin/geth attach http://localhost:8545\n\n\n\nContributing\n\n\nPlease make sure your contributions adhere to our coding guidelines:\n\n\n\n\nCode must be idiomatic Clojure, please refer to the \nstyle guidelines\n (i.e. use \nlein eastwood\n\n \n \nlein kibit\n).\n\n\nCode must be documented.\n\n\nPull requests need to be based on and opened against the \ndevelop\n branch.\n\n\nCommit messages should be prefixed with the root namespace(s) under \nstatus-im\n that they modify.\n\n\ne.g. \"contacts, ios: add contact stylistic changes\"\n\n\n\n\nIssues\n\n\nOnly Github is used to track issues. (Please include the commit and branch when reporting an issue.)\n\n\nOverv.io\n is used to overview issues in multiple repositories.\n\n\nCode formatting\n\n\nPlease run \nlein eastwood\n and \nlein kibit\n before contributing.\n\n\nBranch naming\n\n\nBranch format must be under \nCATEGORY/PLAIN-TEXT-#ISSUE_NUMBER\n acceptable branches are;\n\n\nfeature/discover\n or \nbug/broken-form-#113\n\n\nThe following categories are;\n- \nfeature/\n for implementation of features\n- \nbug/\n for fixing bugs\n- \ntests/\n for unit/UI tests\n- \nexperiment/\n for non-features\n- \nwip/\n for longer lived branches\n- \njunk/\n for irrelevant/soon-to-be-deleted branches\n\n\nPull Requests\n\n\nPull Requests should by default use the \ndevelop\n branch as a base. The \nmaster\n branch is kept stable and \ndevelop\n is periodically merged there. Tags are used for releases. Each Pull Request must be rebased against \ndevelop\n and squashed into a single commit, prefixed with the root namespace(s) under \nstatus-im\n that they modify. e.g.\n\n\n\n\n\"contacts, ios: add contact stylistic changes\"\n\n\n\n\nWalkthrough\n\n\nFork the repository on Github's web UI.\n\n\nClone your fork. Add the upstream as a remote.\n\n\n$ git clone git@github.com:\nyou\n/status-react.git\n$ git remote add upstream git@github.com:status-im/status-react.git\n\n\n\nNow you have two remotes: \norigin\n pointing to your fork and \nupstream\n pointing to the shared repo.\n\n\n$ git fetch --all\n\n\n\nThen isolate the bug/feature work you will do into a topic branch\n\n\n$ git checkout -b bug/missing-contact-#116 upstream/develop\n\n\n\nKeep your branch fresh against upstream\n\n\n$ git fetch upstream\n$ git rebase upstream/develop\n\n\n\nIf multiple people are working on the same feature branch don't forget to also\n\n\n$ git rebase upstream bug/missing-contact-#116\n\n\n\nWhen you are ready to make your pull request\n\n\n$ git push origin\n\n\n\nAfter PR has been reviewed do a final cleanup and squash your commit\n\n\n$ git rebase -i upstream/develop\n$ git push -f origin\n\n\n\nRepository Overview\n\n\nThe Status application is divided into 6 core repositories;\n\n\n\n\n\n\nstatus-react\n - our main react native application writtein in Clojurescript, Java \n Objective C\n\n\n\n\n\n\ngo-ethereum\n - our branch of \ngo-ethereum\n which contains our custom modifications in \ngo-ethereum/status-develop\n\n\n\n\n\n\nstatus-go\n - represents our binding to the \ngo-ethereum\n lib and exposes methods to \nstatus-react\n to Java / Objective C.\n\n\n\n\nstatus-lib\n - implements our application protocols for chatbots, has been absorbed into \nstatus-react\n until application protocol settles\n\n\nreact-native-status\n - the intent behind this repo was to seperate Java/Objective C code into a react native module, it may be absorbed into \nstatus-react\n in future\n\n\nstatus-server\n - is our intermediary server primarily used for contact discovery.", 
            "title": "Building Status"
        }, 
        {
            "location": "/contributing/development/building-status/#building-status", 
            "text": "This document is the entry point for developers of Status. This guide is for anyone who is interested in building, developing, debugging or submitting a bug report, pull request or contributing to Status with code.  This guide is written with OS X in mind.", 
            "title": "Building Status"
        }, 
        {
            "location": "/contributing/development/building-status/#build-and-test", 
            "text": "", 
            "title": "Build and Test"
        }, 
        {
            "location": "/contributing/development/building-status/#requirements", 
            "text": "Homebrew  +  brew update  (optional, for OS X) +  brew tap caskroom/cask . For Windows use  Chocolatey .  Node   NPM   brew install node watchman  Lein   brew install leiningen  react-native   npm install -g react-native-cli  Latest JDK   brew cask install java  Android SDK with build tools version 23.0.1 [Mac]  brew cask install android-sdk  or  Windows/Linux  Genymotion  (optional, you may use an Android Virtual Device or real device)  Setup Android Development Environment / Simulator  GIT over SSH, please add public key to Github  Maven   brew install maven  For Windows,  Ruby   choco install ruby  Cocoapods   sudo gem install cocoapods .", 
            "title": "Requirements"
        }, 
        {
            "location": "/contributing/development/building-status/#windows-specific-setup-notes", 
            "text": "Setting up a development instance in Windows requires some tweaks. Consider the following before attempting the following sections:   Make sure you run everything in a elevated command prompt (Right-click a link to Cmd.exe or Cygwin and click 'Run as Administrator')  Do not use the ./re-natal symlink. Write your own  re-natal.sh  script that uses full relative paths, give it execution permissions with  chmod +x , and use it instead. Script:   #!/usr/bin/env node\n\nrequire('coffee-script/register');\nrequire('./node_modules/re-natal/index.js');   In the root  package.json  edit  \"./postinstall.sh\"  to  \"postinstall.sh\"  Any  npm install  commands (except for  npm install -g  global commands) should be done as follows, to avoid windows symlink problems:  npm install --no-bin-links  Do not use Cygwin for  npm install  commands, use cmd.exe.  React-native is not bug-free. If you run into an error like  error: bundling: UnableToResolveError: Unable to resolve module... , the guaranteed solution is to manually edit the  require()  statements to the full relative path. E.g.  (crypt = require('crypto'))  becomes  (crypt = require('../../../../node_modules/crypto/package.json')) .", 
            "title": "Windows-specific Setup Notes"
        }, 
        {
            "location": "/contributing/development/building-status/#dependencies-setup", 
            "text": "$ git clone git@github.com:status-im/status-react.git -b master   cd status-react\n# or\n$ git clone git@github.com:status-im/status-react.git -b develop   cd status-react\n\n$ lein deps   npm install   ./re-natal deps   lein generate-externs   ./re-natal use-figwheel   lein re-frisk use-re-natal   ./re-natal enable-source-maps\n$ mvn -f modules/react-native-status/ios/RCTStatus dependency:unpack\n$ cd ios   pod install   cd ..", 
            "title": "Dependencies &amp; Setup"
        }, 
        {
            "location": "/contributing/development/building-status/#building-status-for-release", 
            "text": "# fill in store file properties in android/gradle.properties\n$ lein prod-build\n$ react-native run-android --variant=release\n# for iOS, build in Xcode", 
            "title": "Building Status for Release"
        }, 
        {
            "location": "/contributing/development/building-status/#building-status-for-development", 
            "text": "$ lein prod-build\n\n$ ./re-natal use-android-device  device  # (genymotion, real or avd)\n# or\n$ ./re-natal use-ios-device  device  # (simulator or real)\n\n$ ./re-natal use-figwheel\n\n# new tab, run figwheel REPL\n$ BUILD_IDS=\"ios,android\" lein repl\n\n# new tab, run react native packager\n$ react-native start\n\n# FOR ANDROID\n# new tab, enable communication to react-native, figwheel and re-frisk debugging\n$ adb reverse tcp:8081 tcp:8081\n$ adb reverse tcp:3449 tcp:3449\n$ adb reverse tcp:4567 tcp:4567\n$ react-native run-android\n\n# FOR IOS\n$ react-native run-ios", 
            "title": "Building Status for Development"
        }, 
        {
            "location": "/contributing/development/building-status/#access-geth-on-device", 
            "text": "adb forward tcp:8545 tcp:8545\nbuild/bin/geth attach http://localhost:8545", 
            "title": "Access Geth on Device"
        }, 
        {
            "location": "/contributing/development/building-status/#contributing", 
            "text": "Please make sure your contributions adhere to our coding guidelines:   Code must be idiomatic Clojure, please refer to the  style guidelines  (i.e. use  lein eastwood     lein kibit ).  Code must be documented.  Pull requests need to be based on and opened against the  develop  branch.  Commit messages should be prefixed with the root namespace(s) under  status-im  that they modify.  e.g. \"contacts, ios: add contact stylistic changes\"", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/development/building-status/#issues", 
            "text": "Only Github is used to track issues. (Please include the commit and branch when reporting an issue.)  Overv.io  is used to overview issues in multiple repositories.", 
            "title": "Issues"
        }, 
        {
            "location": "/contributing/development/building-status/#code-formatting", 
            "text": "Please run  lein eastwood  and  lein kibit  before contributing.", 
            "title": "Code formatting"
        }, 
        {
            "location": "/contributing/development/building-status/#branch-naming", 
            "text": "Branch format must be under  CATEGORY/PLAIN-TEXT-#ISSUE_NUMBER  acceptable branches are;  feature/discover  or  bug/broken-form-#113  The following categories are;\n-  feature/  for implementation of features\n-  bug/  for fixing bugs\n-  tests/  for unit/UI tests\n-  experiment/  for non-features\n-  wip/  for longer lived branches\n-  junk/  for irrelevant/soon-to-be-deleted branches", 
            "title": "Branch naming"
        }, 
        {
            "location": "/contributing/development/building-status/#pull-requests", 
            "text": "Pull Requests should by default use the  develop  branch as a base. The  master  branch is kept stable and  develop  is periodically merged there. Tags are used for releases. Each Pull Request must be rebased against  develop  and squashed into a single commit, prefixed with the root namespace(s) under  status-im  that they modify. e.g.   \"contacts, ios: add contact stylistic changes\"", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/development/building-status/#walkthrough", 
            "text": "Fork the repository on Github's web UI.  Clone your fork. Add the upstream as a remote.  $ git clone git@github.com: you /status-react.git\n$ git remote add upstream git@github.com:status-im/status-react.git  Now you have two remotes:  origin  pointing to your fork and  upstream  pointing to the shared repo.  $ git fetch --all  Then isolate the bug/feature work you will do into a topic branch  $ git checkout -b bug/missing-contact-#116 upstream/develop  Keep your branch fresh against upstream  $ git fetch upstream\n$ git rebase upstream/develop  If multiple people are working on the same feature branch don't forget to also  $ git rebase upstream bug/missing-contact-#116  When you are ready to make your pull request  $ git push origin  After PR has been reviewed do a final cleanup and squash your commit  $ git rebase -i upstream/develop\n$ git push -f origin", 
            "title": "Walkthrough"
        }, 
        {
            "location": "/contributing/development/building-status/#repository-overview", 
            "text": "The Status application is divided into 6 core repositories;    status-react  - our main react native application writtein in Clojurescript, Java   Objective C    go-ethereum  - our branch of  go-ethereum  which contains our custom modifications in  go-ethereum/status-develop    status-go  - represents our binding to the  go-ethereum  lib and exposes methods to  status-react  to Java / Objective C.   status-lib  - implements our application protocols for chatbots, has been absorbed into  status-react  until application protocol settles  react-native-status  - the intent behind this repo was to seperate Java/Objective C code into a react native module, it may be absorbed into  status-react  in future  status-server  - is our intermediary server primarily used for contact discovery.", 
            "title": "Repository Overview"
        }, 
        {
            "location": "/contributing/development/adding-dapps/", 
            "text": "Adding DApps\n\n\nDuring the Alpha we are accepting example DApps as default contacts, to add your DApp to Status, you need to ensure it works on testnet (Ropsten) and submit a single commit pull request to \nstatus-react\n with the following:\n\n\n\n\n\n\nPlace a square icon(\n85x85px\n or \n192x192\n) of your DApp to \nimages/contacts\n directory. The file should be named the same as your DApp, for example \nmy-dapp.png\n. Make sure your icon fits and looks good with rounded corners.\n\n\n\n\n\n\nAdd information about this icon to \nsrc/status_im/resources.cljs\n, for example:\n\n\n\n\n\n\n(def contacts\n  {:auction-house (js/require \n./images/contacts/auction-house.png\n)\n   :my-dapp (js/require \n./images/contacts/my-dapp.png\n)})\n\n\n\n\n\n\nAdd your DApp to the list of existing DApps (\nresources/default_contacts.json\n):\n\n\n\n\n[\n    ...,\n\n    \nmy-dapp\n: {\n        \nname\n:\n        {\n            \nen\n: \nMy DApp\n\n        },\n        \nphoto-path\n: \ncontacts://my-dapp\n,\n        \ndapp?\n: true,\n        \ndapp-url\n:\n        {\n            \nen\n: \nhttp://link-to-your-dapp.com\n\n        },\n        \ngroups\n: [\ndapps\n]\n    }\n]", 
            "title": "Adding DApps"
        }, 
        {
            "location": "/contributing/development/adding-dapps/#adding-dapps", 
            "text": "During the Alpha we are accepting example DApps as default contacts, to add your DApp to Status, you need to ensure it works on testnet (Ropsten) and submit a single commit pull request to  status-react  with the following:    Place a square icon( 85x85px  or  192x192 ) of your DApp to  images/contacts  directory. The file should be named the same as your DApp, for example  my-dapp.png . Make sure your icon fits and looks good with rounded corners.    Add information about this icon to  src/status_im/resources.cljs , for example:    (def contacts\n  {:auction-house (js/require  ./images/contacts/auction-house.png )\n   :my-dapp (js/require  ./images/contacts/my-dapp.png )})   Add your DApp to the list of existing DApps ( resources/default_contacts.json ):   [\n    ...,\n\n     my-dapp : {\n         name :\n        {\n             en :  My DApp \n        },\n         photo-path :  contacts://my-dapp ,\n         dapp? : true,\n         dapp-url :\n        {\n             en :  http://link-to-your-dapp.com \n        },\n         groups : [ dapps ]\n    }\n]", 
            "title": "Adding DApps"
        }, 
        {
            "location": "/contributing/design-guidelines/", 
            "text": "Design\n\n\nDocumentation is coming soon.\n\n\nFor the time being, if you'd like to contribute to design, please ask us about it \non the Status Slack\n.", 
            "title": "Design Guidelines"
        }, 
        {
            "location": "/contributing/design-guidelines/#design", 
            "text": "Documentation is coming soon.  For the time being, if you'd like to contribute to design, please ask us about it  on the Status Slack .", 
            "title": "Design"
        }, 
        {
            "location": "/contributing/testing-and-feedback/", 
            "text": "Testing\n\n\nShake your phone and submit bug report.\nPlease try to be as descripive as possible.\n\n\nFor Developers\n\n\nUI (Appium) tests\n\n\nTo run the tests:\n\n\n\n\nInstall appium: run \nnpm install -g appium\n\n\nStart application on emulator or real device (\nmore details here\n).\n\n\n\n\nImportant:\n use the \nandroid-test\n build (run \nBUILD_IDS=\"android-test\" lein repl\n). Testing in iOS is not supported yet.\n3. Start appium server in new tab: run \nappium --session-override\n\n4. Run \nlein test\n\n\nHints / Gotchas:\n\n\n\n\nConfirmed working using Appium version 1.6.1.\n\n\nTo find an element easily in the tests, use the \n:accessibility-label\n property in the respective Reagent component.\n\n\nWhen querying an element by its inner text, be sure to use the whole text that the element is supposed to contain (it won't match just a part of the text).\n\n\n\n\nUnit tests\n\n\nTo run the unit tests execute:\n\n\nlein doo node test once\n   \n\n     or\n\n\nlein doo node test\n\n\nSecond command will watch files inside \nsrc\n and \ntest\n folders and rerun on changes.", 
            "title": "Testing & Feedback"
        }, 
        {
            "location": "/contributing/testing-and-feedback/#testing", 
            "text": "Shake your phone and submit bug report.\nPlease try to be as descripive as possible.", 
            "title": "Testing"
        }, 
        {
            "location": "/contributing/testing-and-feedback/#for-developers", 
            "text": "", 
            "title": "For Developers"
        }, 
        {
            "location": "/contributing/testing-and-feedback/#ui-appium-tests", 
            "text": "To run the tests:   Install appium: run  npm install -g appium  Start application on emulator or real device ( more details here ).   Important:  use the  android-test  build (run  BUILD_IDS=\"android-test\" lein repl ). Testing in iOS is not supported yet.\n3. Start appium server in new tab: run  appium --session-override \n4. Run  lein test  Hints / Gotchas:   Confirmed working using Appium version 1.6.1.  To find an element easily in the tests, use the  :accessibility-label  property in the respective Reagent component.  When querying an element by its inner text, be sure to use the whole text that the element is supposed to contain (it won't match just a part of the text).", 
            "title": "UI (Appium) tests"
        }, 
        {
            "location": "/contributing/testing-and-feedback/#unit-tests", 
            "text": "To run the unit tests execute:  lein doo node test once     \n     or  lein doo node test  Second command will watch files inside  src  and  test  folders and rerun on changes.", 
            "title": "Unit tests"
        }, 
        {
            "location": "/contributing/documenting/", 
            "text": "Documenting\n\n\nWithout clear documentation, new members to the community have no clear instruction on how they can help to make Status better. We truly value contributions that help to improve our documentation; whether that be tutorials for users, additions to the FAQs, or more granular instructions for developers - it all adds up and our community appreciates it :)\n\n\nOur Wiki is powered by MKDocs, and is on: \nhttps://github.com/status-im/wiki.status.im\n, and if you spot any errors, find parts of the documentation confusing, or have some suggestions on how we could have clearer communication we'd love your help, and feel free to let us know via the \nStatus Slack\n.\n\n\nDocumenting Guide\n\n\nIt's fairly difficult to write a general documentation guide as how you document stuff will depend on what it is you are trying to explain. The most basic stuff to know is that MKDocs uses markdown as it's primary language, although you can also write your guides using inline HTML as well. Please go \nhere\n for more detailed info on this, as well as a look at how the file structure of our docs works.\n\n\nGetting Set Up\n\n\nYou need to have both python and pip set up on your machine to install MKDocs. You can find all the information for how to do that and what versions are required \nhere\n. I had python already intalled on my machine, but needed to get pip:\n\n\nsudo easy_install pip\nsudo pip install mkdocs\n\n\n\n\nIt seemed like using \nsudo\n was important otherwise the mkdocs install failed with some nasty stack trace, but that may have been specific to my environment (Mac). Once you have got that all working and  \n\n\nmkdocs --version\n \n\n\nreturns an answer (currently \nmkdocs, version 0.16.1\n), then you can clone into the status repo and get going.\n\n\ngit clone https://github.com/status-im/wiki.status.im.git\n \n\n\n(or \ngit clone git@github.com:status-im/wiki.status.im.git\n if you have your SSH keys set up) followed by \n\n\ncd wiki.status.im\nmkdocs serve\n\n\n\n\nYou should then be able to navigate to http://localhost:8000 or http://127.0.0.1:8000 and see the changes you are making to the wiki as you make them. Magic!\n\n\nGeneral Notes on What We Look For\n\n\nGenerally speaking, we like a lot of screenshots and less language as this helps us to guide people all over the world who may not all speak the same languages. Take a look at our \nUser Guide\n for a rough outline of what we mean by balancing your text with screenshots and other helpful images. \n\n\nAs you can see from our \ngithub repo\n all of the different documents are kept in the \ndocs\n directory. Click through to there to find the section and then the specific document you are wanting to add to or edit, or make a new file for documentation that you feel is missing. \n\n\n\n\nIn the top level repo, you can also see an \nmkdocs.yml\n file, which is what controls how and where each document appears. If you are adding a new document, you will need to speak to Jarrad, Carl or another team member to figure out where it belongs, but either way you will need to edit this file in order for it to appear. It is definitely best to communicate with the core team before diving this deep though.\n\n\nAs you can see, I have uploaded a bunch of images into this post (which is largely about encouraging you to use lots of images in your own documentation and explainers). The images are all kept in the \nimg\n directory in each folder within the \ndocs\n directory. You cannot upload straight to these \nimg\n folders as that requires push access to the whole repo, but you can make your own fork of \nwiki.status.im\n and upload the images there to be merged by the team once you have completed your awesome work. To do all this, navigate to the folder you are working in and click the \nFork\n option in the very top right. This will start a new fork of the wiki in your own repo, where you can upload the photos and then later push back to status to be merged.\n\n\n\n\nOnce you have forked it and selected where it should go in your profile, you can then add images easily by either dragging and dropping or uploading directly from your machine.\n\n\n\n\nYou can select the first radio button option to commit the uploaded images you need directly onto your own master branch. From there, once you are sure that all the changes you have made are the ones you want to make and look good on the wiki via that neat trick with\n\n\nmkdocs serve\n\n\nthen you can submit a PR to the actual status wiki:\n\n\n\n\nClick the highlighted button near the top right and follow the instructions from there to submit your changes to the status team. You should see a screen something like this where you can review all the changes you have made before actually submitting. For the PR, I have uploaded the photos needed for this post, made two grammatical changes to the User Guide and, obviously enough, uploaded this entire \ndocumenting.md\n file, all of which I can review easily. \n\n\n\n\nThank you so much for adding to our wonderful, free (libre) open source, community-driven effort to bring Ethereum to the people!\n\n\nDocumentation Guidelines\n\n\nThese will evolve as the project does, but really depends on what specific type of documentation you are looking to help out with. For technical documentation, examples and lots of code is what we are primarily looking for; by way of example see the first set up section of this article. For instance, in order to add an image here, you can either use inline html (my preferred option because it is easier to positiona dn style) or the normal markdown way of doing things. The images above are inserted like so:\n\n\ncenter\nimg src=\"../img/status-wiki.png\" /\n/center\n \n\n\nand style tags etc can be added really easily:\n\n\ncenter\nimg src=\"../img/status-wiki.png\" style=\"width:300px\" /\n/center\n\n\nor you can just do it in normal markdown:\n\n\n[![We lost the documentation on quantum mechanics.  You'll have to decode the regexes yourself.](img/xkcd-224.jpg)](https://xkcd.com/224/ \"We lost the documentation on quantum mechanics.  You'll have to decode the regexes yourself.\")\n\n\nIf you are writing documentation that is end-user-facing, rather than aimed at the technical folks in our community, then the less code and text  and the more pretty images with directions scrawled across them the better.", 
            "title": "Documenting"
        }, 
        {
            "location": "/contributing/documenting/#documenting", 
            "text": "Without clear documentation, new members to the community have no clear instruction on how they can help to make Status better. We truly value contributions that help to improve our documentation; whether that be tutorials for users, additions to the FAQs, or more granular instructions for developers - it all adds up and our community appreciates it :)  Our Wiki is powered by MKDocs, and is on:  https://github.com/status-im/wiki.status.im , and if you spot any errors, find parts of the documentation confusing, or have some suggestions on how we could have clearer communication we'd love your help, and feel free to let us know via the  Status Slack .", 
            "title": "Documenting"
        }, 
        {
            "location": "/contributing/documenting/#documenting-guide", 
            "text": "It's fairly difficult to write a general documentation guide as how you document stuff will depend on what it is you are trying to explain. The most basic stuff to know is that MKDocs uses markdown as it's primary language, although you can also write your guides using inline HTML as well. Please go  here  for more detailed info on this, as well as a look at how the file structure of our docs works.", 
            "title": "Documenting Guide"
        }, 
        {
            "location": "/contributing/documenting/#getting-set-up", 
            "text": "You need to have both python and pip set up on your machine to install MKDocs. You can find all the information for how to do that and what versions are required  here . I had python already intalled on my machine, but needed to get pip:  sudo easy_install pip\nsudo pip install mkdocs  It seemed like using  sudo  was important otherwise the mkdocs install failed with some nasty stack trace, but that may have been specific to my environment (Mac). Once you have got that all working and    mkdocs --version    returns an answer (currently  mkdocs, version 0.16.1 ), then you can clone into the status repo and get going.  git clone https://github.com/status-im/wiki.status.im.git    (or  git clone git@github.com:status-im/wiki.status.im.git  if you have your SSH keys set up) followed by   cd wiki.status.im\nmkdocs serve  You should then be able to navigate to http://localhost:8000 or http://127.0.0.1:8000 and see the changes you are making to the wiki as you make them. Magic!", 
            "title": "Getting Set Up"
        }, 
        {
            "location": "/contributing/documenting/#general-notes-on-what-we-look-for", 
            "text": "Generally speaking, we like a lot of screenshots and less language as this helps us to guide people all over the world who may not all speak the same languages. Take a look at our  User Guide  for a rough outline of what we mean by balancing your text with screenshots and other helpful images.   As you can see from our  github repo  all of the different documents are kept in the  docs  directory. Click through to there to find the section and then the specific document you are wanting to add to or edit, or make a new file for documentation that you feel is missing.    In the top level repo, you can also see an  mkdocs.yml  file, which is what controls how and where each document appears. If you are adding a new document, you will need to speak to Jarrad, Carl or another team member to figure out where it belongs, but either way you will need to edit this file in order for it to appear. It is definitely best to communicate with the core team before diving this deep though.  As you can see, I have uploaded a bunch of images into this post (which is largely about encouraging you to use lots of images in your own documentation and explainers). The images are all kept in the  img  directory in each folder within the  docs  directory. You cannot upload straight to these  img  folders as that requires push access to the whole repo, but you can make your own fork of  wiki.status.im  and upload the images there to be merged by the team once you have completed your awesome work. To do all this, navigate to the folder you are working in and click the  Fork  option in the very top right. This will start a new fork of the wiki in your own repo, where you can upload the photos and then later push back to status to be merged.   Once you have forked it and selected where it should go in your profile, you can then add images easily by either dragging and dropping or uploading directly from your machine.   You can select the first radio button option to commit the uploaded images you need directly onto your own master branch. From there, once you are sure that all the changes you have made are the ones you want to make and look good on the wiki via that neat trick with  mkdocs serve  then you can submit a PR to the actual status wiki:   Click the highlighted button near the top right and follow the instructions from there to submit your changes to the status team. You should see a screen something like this where you can review all the changes you have made before actually submitting. For the PR, I have uploaded the photos needed for this post, made two grammatical changes to the User Guide and, obviously enough, uploaded this entire  documenting.md  file, all of which I can review easily.    Thank you so much for adding to our wonderful, free (libre) open source, community-driven effort to bring Ethereum to the people!", 
            "title": "General Notes on What We Look For"
        }, 
        {
            "location": "/contributing/documenting/#documentation-guidelines", 
            "text": "These will evolve as the project does, but really depends on what specific type of documentation you are looking to help out with. For technical documentation, examples and lots of code is what we are primarily looking for; by way of example see the first set up section of this article. For instance, in order to add an image here, you can either use inline html (my preferred option because it is easier to positiona dn style) or the normal markdown way of doing things. The images above are inserted like so:  center img src=\"../img/status-wiki.png\" / /center    and style tags etc can be added really easily:  center img src=\"../img/status-wiki.png\" style=\"width:300px\" / /center  or you can just do it in normal markdown:  [![We lost the documentation on quantum mechanics.  You'll have to decode the regexes yourself.](img/xkcd-224.jpg)](https://xkcd.com/224/ \"We lost the documentation on quantum mechanics.  You'll have to decode the regexes yourself.\")  If you are writing documentation that is end-user-facing, rather than aimed at the technical folks in our community, then the less code and text  and the more pretty images with directions scrawled across them the better.", 
            "title": "Documentation Guidelines"
        }, 
        {
            "location": "/contributing/outreach/", 
            "text": "Community Outreach \n Marketing\n\n\nAny communications efforts are welcomed, and it's necessary that any contributions that represent Status are closely aligned of our \nMission \n Core Values\n. Brand messaging needs to be consistent, honest, transparent and accurately reflect what the project aims to achieve.\n\n\nStatus is not yet ready for mass-adoption, and a clearly defined a user acquisition strategy will be outlined here at a later date. For the time being, contributors interested helping with community outreach should focus on helping to produce meaningful content and spreading the word amongst other blockchain enthusiasts. Some practical tips and suggestions on how you can take part in and help to strengthen our community can be found at the \nGrowing our Community\n page.\n\n\nGet Involved\n\n\nJoin the \nStatus Slack\n and head over to the \n#community-building\n channel to share what you had in mind, and bounce ideas.\n\n\nGuest Posts\n\n\nEnjoy writing about Ethereum? Come write an article that will be featured on the \nStatus blog\n.\n\n\nInterviews\n\n\nContributed to Status or the Ethereum ecosystem? Help us spread the word by being part of an interviews series published on the \nblog\n and across social media platforms, like \nTwitter\n, \nReddit\n and \nFacebook\n.\n\n\nQuality Assurance\n\n\nA brand is a delicate thing, and any content contributions require acceptance from within our community before publication. Text content must be stylistically and structually well-produced with no grammatical errors. We'd be happy to help with editing and proof-reading :)", 
            "title": "Outreach"
        }, 
        {
            "location": "/contributing/outreach/#community-outreach-marketing", 
            "text": "Any communications efforts are welcomed, and it's necessary that any contributions that represent Status are closely aligned of our  Mission   Core Values . Brand messaging needs to be consistent, honest, transparent and accurately reflect what the project aims to achieve.  Status is not yet ready for mass-adoption, and a clearly defined a user acquisition strategy will be outlined here at a later date. For the time being, contributors interested helping with community outreach should focus on helping to produce meaningful content and spreading the word amongst other blockchain enthusiasts. Some practical tips and suggestions on how you can take part in and help to strengthen our community can be found at the  Growing our Community  page.", 
            "title": "Community Outreach &amp; Marketing"
        }, 
        {
            "location": "/contributing/outreach/#get-involved", 
            "text": "Join the  Status Slack  and head over to the  #community-building  channel to share what you had in mind, and bounce ideas.", 
            "title": "Get Involved"
        }, 
        {
            "location": "/contributing/outreach/#guest-posts", 
            "text": "Enjoy writing about Ethereum? Come write an article that will be featured on the  Status blog .", 
            "title": "Guest Posts"
        }, 
        {
            "location": "/contributing/outreach/#interviews", 
            "text": "Contributed to Status or the Ethereum ecosystem? Help us spread the word by being part of an interviews series published on the  blog  and across social media platforms, like  Twitter ,  Reddit  and  Facebook .", 
            "title": "Interviews"
        }, 
        {
            "location": "/contributing/outreach/#quality-assurance", 
            "text": "A brand is a delicate thing, and any content contributions require acceptance from within our community before publication. Text content must be stylistically and structually well-produced with no grammatical errors. We'd be happy to help with editing and proof-reading :)", 
            "title": "Quality Assurance"
        }, 
        {
            "location": "/contributing/translations/", 
            "text": "Translations\n\n\nSpecial thanks to \n@cryptowanderer\n for contributing this fantastic guide!\n\n\nThank you for taking the time to help out with our fledgling free (libre) open source project. Any initiative like this depends primarily on the community that forms around it, so by contributing any of your knowledge or skills, even if it\u2019s just one line, you are playing an active role in forming the sort of decentralized, robust peer network which might have a hope of securing a more equitable future for all of us.\n\n\nObviously, the first and most important thing to know about contributing in any way to the wonderful status.im is where to go to find all the stuff. That one is easy to answer: \nclick here\n.\n\n\nNow, git is very cool, and there are ways to use the command line to do all this stuff, but if you\u2019re doing that then I am going to assume that you don\u2019t need a guide, or can find a better one than this on your own. This will only cover submitting a pull request (PR) through the browser and is aimed specifically at those wanting to help us with translations who might not be actual coders themselves.\n\n\nThe page with all the translations listed on it should look something like this:\n\n\n\n\nIf you can see a file for your language already, then click on that and we can submit the PR from there. You can skip the next section and go straight to the last one if you are just updating an existing file. If you are starting a new file for a language not currently listed, please click the \nCreate new file\n button highlighted in the top right.\n\n\nStart a New Translation\n\n\nIf you are creating a new file, this is what the page should look like:\n\n\n\n\nThere are some important things to note here. First off, I have decided to help out with the translation to Wooki, so have called my file wo.cljs. Please give the two letters used to represent your language and make sure to include the .cljs file extension (as a lot of status is written in clojure and clojurescript). If your language doesn\u2019t have a two letter identifier, or you are doing a dialect, then use the fr_ch.cljs example as your template. Second, make sure that you update the first line. In this example, I have copy-pasted the Afrikaans file and changed .af to .wo to match what I called my file.\n\n\nYou can then get translating - as you can see by my exact translation of members-title to the Wooki equivalent.\n\n\nOnce you\u2019ve done all the translations, all you really need to do is propose the file, review the changes you have made, submit the PR and the team should be able to handle it from there. Please see below for a fully illustrated version of those last two steps if you need it.\n\n\n\n\nUpdate an Existing Translation\n\n\nIf your language already appears in this repo, but you would like to see some stuff change because it\u2019s wrong or impolite or gets its tense all mixed up, then click on the file in question and submit a PR from there. Seeing as I\u2019m South African, I\u2019m going to take on the Afrikaans translation and submit a PR which the team will then decide to merge or not, depending on how \nlekker\n they think my \ntaal\n is.\n\n\nYou want to select the file and then click on the pencil edit icon near the top right:\n\n\n\n\nThis should open a file on your fork of the project, which will allow you to edit it as you please and submit the changes to the status team, who can review it, decide if they like your changes and then merge it back from your newly-created fork into the main repo. I know it sounds a bit complex, but this is awesome for versioning software, controlling changes, edits, and conflicts and makes much more sense once you do it a bit yourself. Your edit page should look something like this:\n\n\n\n\nAs I have indicated, I am going to edit \"en jy\" to \u201cen u\u201d because it is more formal and polite (if you speak Afrikaans, you know that this is contextually incorrect, but bear with me while I illustrate the concept here).\n\n\nOnce you are happy with all the changes you have made, scroll down and hit the green button to propose them. This should take you to a screen where it will highlight in red what the file used to say and highlight in green what you have changed it to. Please review your changes here in full and then hit the other green button in the top left to submit the PR:\n\n\n\n\nAnd that\u2019s it. Now sit back, have a cup of tea, and let the rest of the black magic that is status.im do its thing.", 
            "title": "Translations"
        }, 
        {
            "location": "/contributing/translations/#translations", 
            "text": "Special thanks to  @cryptowanderer  for contributing this fantastic guide!  Thank you for taking the time to help out with our fledgling free (libre) open source project. Any initiative like this depends primarily on the community that forms around it, so by contributing any of your knowledge or skills, even if it\u2019s just one line, you are playing an active role in forming the sort of decentralized, robust peer network which might have a hope of securing a more equitable future for all of us.  Obviously, the first and most important thing to know about contributing in any way to the wonderful status.im is where to go to find all the stuff. That one is easy to answer:  click here .  Now, git is very cool, and there are ways to use the command line to do all this stuff, but if you\u2019re doing that then I am going to assume that you don\u2019t need a guide, or can find a better one than this on your own. This will only cover submitting a pull request (PR) through the browser and is aimed specifically at those wanting to help us with translations who might not be actual coders themselves.  The page with all the translations listed on it should look something like this:   If you can see a file for your language already, then click on that and we can submit the PR from there. You can skip the next section and go straight to the last one if you are just updating an existing file. If you are starting a new file for a language not currently listed, please click the  Create new file  button highlighted in the top right.", 
            "title": "Translations"
        }, 
        {
            "location": "/contributing/translations/#start-a-new-translation", 
            "text": "If you are creating a new file, this is what the page should look like:   There are some important things to note here. First off, I have decided to help out with the translation to Wooki, so have called my file wo.cljs. Please give the two letters used to represent your language and make sure to include the .cljs file extension (as a lot of status is written in clojure and clojurescript). If your language doesn\u2019t have a two letter identifier, or you are doing a dialect, then use the fr_ch.cljs example as your template. Second, make sure that you update the first line. In this example, I have copy-pasted the Afrikaans file and changed .af to .wo to match what I called my file.  You can then get translating - as you can see by my exact translation of members-title to the Wooki equivalent.  Once you\u2019ve done all the translations, all you really need to do is propose the file, review the changes you have made, submit the PR and the team should be able to handle it from there. Please see below for a fully illustrated version of those last two steps if you need it.", 
            "title": "Start a New Translation"
        }, 
        {
            "location": "/contributing/translations/#update-an-existing-translation", 
            "text": "If your language already appears in this repo, but you would like to see some stuff change because it\u2019s wrong or impolite or gets its tense all mixed up, then click on the file in question and submit a PR from there. Seeing as I\u2019m South African, I\u2019m going to take on the Afrikaans translation and submit a PR which the team will then decide to merge or not, depending on how  lekker  they think my  taal  is.  You want to select the file and then click on the pencil edit icon near the top right:   This should open a file on your fork of the project, which will allow you to edit it as you please and submit the changes to the status team, who can review it, decide if they like your changes and then merge it back from your newly-created fork into the main repo. I know it sounds a bit complex, but this is awesome for versioning software, controlling changes, edits, and conflicts and makes much more sense once you do it a bit yourself. Your edit page should look something like this:   As I have indicated, I am going to edit \"en jy\" to \u201cen u\u201d because it is more formal and polite (if you speak Afrikaans, you know that this is contextually incorrect, but bear with me while I illustrate the concept here).  Once you are happy with all the changes you have made, scroll down and hit the green button to propose them. This should take you to a screen where it will highlight in red what the file used to say and highlight in green what you have changed it to. Please review your changes here in full and then hit the other green button in the top left to submit the PR:   And that\u2019s it. Now sit back, have a cup of tea, and let the rest of the black magic that is status.im do its thing.", 
            "title": "Update an Existing Translation"
        }, 
        {
            "location": "/community/how-to-grow-our-community/", 
            "text": "Growing our Community\n\n\nThis is a list of practical tips and suggestions on how you can take part in, help to strengthen and grow our community. \n\n\nIf you haven\u2019t done so yet, please read our \nMission and Core Values\n and ensure you follow our \nCode of Conduct\n, as these are closely aligned.\n\n\nHow to Get Involved\n\n\n\n\n\n\nAt the moment much of the community communication takes place on slack. A first step to getting involved can be as simple as joining \nour Slack\n and saying \u201chi\u201d (we're friendly people!).\n\n\n\n\n\n\nTake a look around the Slack channels, where you will find #dev-status, #dapp-chat, #lll etc.\n\n\n\n\n\n\nWhen you get to know people in the community who have interests or skills then let them know about or invite them to join the channels that play to their strengths.\n\n\n\n\n\n\nIf you think there is a need for a channel (but you're unsure) then please drop in to #channel-manager and make a proposal: \nMake sure that the channel name is easy to understand\n. The description should help others make a quick decision which channels they should join.\n\n\n\n\n\n\nHighlighting \n Managing Needs\n\n\n\n\n\n\nShare your ideas on how we can make the list of tasks and needed contributions more easily visible. The more accessible and manageable tasks become to the community the better.\n\n\n\n\n\n\nSimple requests can be addressed by individual people, long complex tasks may require a handful of people to complete, so encourage and help create bands of people to accomplish those.\n\n\n\n\n\n\nIf you know someone who would be great for a task, let them know! Don't pressure them if they are too busy.   \n\n\n\n\n\n\nDo your best to keep tasks as specific as possible, work to create clear goals.  Offer people specific and challenging goals that suit them, and keep them accountable in a friendly, non-pushy manner.\n\n\n\n\n\n\nGive clear feedback, and challenges that exercise people\u2019s skills to their limits.\n\n\n\n\n\n\nHow can we improve our tools for finding and tracking work that needs to be done?  The easier it is for everyone to see what needs to be done, the easier it is to contribute \u2013 If you have a suggestion then let everyone know your ideas!\n\n\n\n\n\n\nIf you are prominent in the community it is your duty to more frequently ask people if they are available for tasks.\n\n\n\n\n\n\nCulture\n\n\n\n\n\n\nStatus is focused on the \nEthereum Public Blockchain\n.  We want to retain and enhance the collaborative culture which has driven the creation of Ethereum itself, but we aim to approach our ideals of open participation with a level of pragmatism and we recognise that there is also a place in the world for private Blockchains.\n\n\n\n\n\n\nPeople are more willing to contribute to their community when they see that others are contributing too, and that their own contributions are useful and valued.\n\n\n\n\n\n\nAlways communicate the benefits of contribution, it will positively impact everyone in the community and increase the numner of people who will care, and perhaps contribute.\n\n\n\n\n\n\nDevelopment will take as long as it has to. While we all recognise this, we encourage clear goals, aligned with \"soft deadlines\" which will help encourage and focus contribution.\n\n\n\n\n\n\nOur community is a place where friendships develop, and perhaps occasional disagreements crop up too.  Just remember that we're all human, and it will be easier and more fun if we treat each other with respect.\n\n\n\n\n\n\nRemember, we're all good at different things and in different ways; even the best of us make mistakes.\n\n\n\n\n\n\nNever be silent about positive feedback!  If things are going well, let people know! Good feelings will enhance peoples motivation.\n\n\n\n\n\n\nMake an effort to become familiar with anyone who is contributing to the project, and get to know them over time.\n\n\n\n\n\n\nGratitude \n Reciprocity\n\n\n\n\n\n\nThink of ways you can encourage people to commit to contributing to the community on a long term basis. Whether that's taking an interest in someone, highlighting a task they might find interesting or even reminding them how we appreciate their accomplishments. In doing so we can raise everyone\u2019s willingness to keep this project alive. \n\n\n\n\n\n\nStart by acknowledging each other, whether that's welcoming people to the community or thanking them for their contributions.\n\n\n\n\n\n\nFree Software communities like ours thrive on reciprocity. When you contribute to the community you encourage other people to contribute too!  The way you contribute will help to shape the culture of the entire community, as the contributions you make influence the contributions of others.\n\n\n\n\n\n\nOffer more frequent feedback on tasks \n contributions that have a definate goal.\n\n\n\n\n\n\nGive constructive feedback on people\u2019s performance, and if they like competition - encourage friendly competition with others.\n\n\n\n\n\n\nNegative feedback can be helpful too.  We encourage \nconstructive\n criticism and friendly debate, as long as it remains \nfriendly\n.\n\n\n\n\n\n\nFind other ways to reward contributors, either through your own words, actions or material.\n\n\n\n\n\n\nActively highlight and communicate your mistakes \nand\n accomplishments, be accepting of those who do. The faster mistakes are discovered the faster we can solve them, and the faster we can praise your accomplishments.\n\n\n\n\n\n\nAny rewards should not be based on tasks but rather on consistent performance. Rewards should be impromptu.\n\n\n\n\n\n\nAdding task-contingent rewards (for doing or finishing a task) to an interesting task causes people to be less interested and successful in the task. (This effect is larger for monetary rewards than for prizes, status rewards and charitable donations.)\n\n\n\n\n\n\nConversation\n\n\n\n\n\n\nIf you have something you share that you think aligns with the general interests of the community, share it in the #status \nSlack\n channel.\n\n\n\n\n\n\nGoing off-topic is okay! But try and keep your conversations in their most appropriate #channel.\n\n\n\n\n\n\nHaving a custom profile picture allows other people to recognise you. If you like, show your face! It comes in handy when developing friendships or finding each other A.F.K. \n\n\n\n\n\n\nIf you see any work that involves Status, whether it's a blog post, a contribution, someone talking about Status in another chat - let everyone know!\n\n\n\n\n\n\nHow can we generate and show our metrics to different audiences?  Information like on how we're growing, both in absolute numbers and as percentages!\n\n\n\n\n\n\nLook at ways other successful communities are working, see if we can find similarities or ways we can be better and talk about it.\n\n\n\n\n\n\nIf you see any publicity and endorsements on Status, let people know!", 
            "title": "Grow our Community"
        }, 
        {
            "location": "/community/how-to-grow-our-community/#growing-our-community", 
            "text": "This is a list of practical tips and suggestions on how you can take part in, help to strengthen and grow our community.   If you haven\u2019t done so yet, please read our  Mission and Core Values  and ensure you follow our  Code of Conduct , as these are closely aligned.", 
            "title": "Growing our Community"
        }, 
        {
            "location": "/community/how-to-grow-our-community/#how-to-get-involved", 
            "text": "At the moment much of the community communication takes place on slack. A first step to getting involved can be as simple as joining  our Slack  and saying \u201chi\u201d (we're friendly people!).    Take a look around the Slack channels, where you will find #dev-status, #dapp-chat, #lll etc.    When you get to know people in the community who have interests or skills then let them know about or invite them to join the channels that play to their strengths.    If you think there is a need for a channel (but you're unsure) then please drop in to #channel-manager and make a proposal:  Make sure that the channel name is easy to understand . The description should help others make a quick decision which channels they should join.", 
            "title": "How to Get Involved"
        }, 
        {
            "location": "/community/how-to-grow-our-community/#highlighting-managing-needs", 
            "text": "Share your ideas on how we can make the list of tasks and needed contributions more easily visible. The more accessible and manageable tasks become to the community the better.    Simple requests can be addressed by individual people, long complex tasks may require a handful of people to complete, so encourage and help create bands of people to accomplish those.    If you know someone who would be great for a task, let them know! Don't pressure them if they are too busy.       Do your best to keep tasks as specific as possible, work to create clear goals.  Offer people specific and challenging goals that suit them, and keep them accountable in a friendly, non-pushy manner.    Give clear feedback, and challenges that exercise people\u2019s skills to their limits.    How can we improve our tools for finding and tracking work that needs to be done?  The easier it is for everyone to see what needs to be done, the easier it is to contribute \u2013 If you have a suggestion then let everyone know your ideas!    If you are prominent in the community it is your duty to more frequently ask people if they are available for tasks.", 
            "title": "Highlighting &amp; Managing Needs"
        }, 
        {
            "location": "/community/how-to-grow-our-community/#culture", 
            "text": "Status is focused on the  Ethereum Public Blockchain .  We want to retain and enhance the collaborative culture which has driven the creation of Ethereum itself, but we aim to approach our ideals of open participation with a level of pragmatism and we recognise that there is also a place in the world for private Blockchains.    People are more willing to contribute to their community when they see that others are contributing too, and that their own contributions are useful and valued.    Always communicate the benefits of contribution, it will positively impact everyone in the community and increase the numner of people who will care, and perhaps contribute.    Development will take as long as it has to. While we all recognise this, we encourage clear goals, aligned with \"soft deadlines\" which will help encourage and focus contribution.    Our community is a place where friendships develop, and perhaps occasional disagreements crop up too.  Just remember that we're all human, and it will be easier and more fun if we treat each other with respect.    Remember, we're all good at different things and in different ways; even the best of us make mistakes.    Never be silent about positive feedback!  If things are going well, let people know! Good feelings will enhance peoples motivation.    Make an effort to become familiar with anyone who is contributing to the project, and get to know them over time.", 
            "title": "Culture"
        }, 
        {
            "location": "/community/how-to-grow-our-community/#gratitude-reciprocity", 
            "text": "Think of ways you can encourage people to commit to contributing to the community on a long term basis. Whether that's taking an interest in someone, highlighting a task they might find interesting or even reminding them how we appreciate their accomplishments. In doing so we can raise everyone\u2019s willingness to keep this project alive.     Start by acknowledging each other, whether that's welcoming people to the community or thanking them for their contributions.    Free Software communities like ours thrive on reciprocity. When you contribute to the community you encourage other people to contribute too!  The way you contribute will help to shape the culture of the entire community, as the contributions you make influence the contributions of others.    Offer more frequent feedback on tasks   contributions that have a definate goal.    Give constructive feedback on people\u2019s performance, and if they like competition - encourage friendly competition with others.    Negative feedback can be helpful too.  We encourage  constructive  criticism and friendly debate, as long as it remains  friendly .    Find other ways to reward contributors, either through your own words, actions or material.    Actively highlight and communicate your mistakes  and  accomplishments, be accepting of those who do. The faster mistakes are discovered the faster we can solve them, and the faster we can praise your accomplishments.    Any rewards should not be based on tasks but rather on consistent performance. Rewards should be impromptu.    Adding task-contingent rewards (for doing or finishing a task) to an interesting task causes people to be less interested and successful in the task. (This effect is larger for monetary rewards than for prizes, status rewards and charitable donations.)", 
            "title": "Gratitude &amp; Reciprocity"
        }, 
        {
            "location": "/community/how-to-grow-our-community/#conversation", 
            "text": "If you have something you share that you think aligns with the general interests of the community, share it in the #status  Slack  channel.    Going off-topic is okay! But try and keep your conversations in their most appropriate #channel.    Having a custom profile picture allows other people to recognise you. If you like, show your face! It comes in handy when developing friendships or finding each other A.F.K.     If you see any work that involves Status, whether it's a blog post, a contribution, someone talking about Status in another chat - let everyone know!    How can we generate and show our metrics to different audiences?  Information like on how we're growing, both in absolute numbers and as percentages!    Look at ways other successful communities are working, see if we can find similarities or ways we can be better and talk about it.    If you see any publicity and endorsements on Status, let people know!", 
            "title": "Conversation"
        }, 
        {
            "location": "/community/slack/", 
            "text": "Slack\n\n\nThe Status Community uses Slack (and GitHub) to communicate with one another (we hope we will switch to Status for this at some point in the future!). Anyone is welcome to join, regardless of your location or experience with Ethereum, providing you:\n\n\na) Adhere to the \nThe Community Code of Conduct\n.\n\n\nb) Feel \nThe Status Mission \n Core Values\n is a worthy objective.\n\n\nJoin our slack here: \nhttp://slack.status.im\n.\n\n\nChannels\n\n\nTo help provide clear communication for the community, we ask that you use the appropriate channel. Every channel has a clearly labelled purpose, and we recommend you start by introducing yourself in the \n#status\n channel (we're friendly people!).", 
            "title": "Slack"
        }, 
        {
            "location": "/community/slack/#slack", 
            "text": "The Status Community uses Slack (and GitHub) to communicate with one another (we hope we will switch to Status for this at some point in the future!). Anyone is welcome to join, regardless of your location or experience with Ethereum, providing you:  a) Adhere to the  The Community Code of Conduct .  b) Feel  The Status Mission   Core Values  is a worthy objective.  Join our slack here:  http://slack.status.im .", 
            "title": "Slack"
        }, 
        {
            "location": "/community/slack/#channels", 
            "text": "To help provide clear communication for the community, we ask that you use the appropriate channel. Every channel has a clearly labelled purpose, and we recommend you start by introducing yourself in the  #status  channel (we're friendly people!).", 
            "title": "Channels"
        }, 
        {
            "location": "/community/newsletter/", 
            "text": "Newsletter\n\n\nIf you'd like to stay updated about Status, or be notified when we make public releases, you can sign up for our mailing list directly from the \nHome Page\n. We care deeply about privacy, read our privacy policy \nhere\n.", 
            "title": "Newsletter"
        }, 
        {
            "location": "/community/newsletter/#newsletter", 
            "text": "If you'd like to stay updated about Status, or be notified when we make public releases, you can sign up for our mailing list directly from the  Home Page . We care deeply about privacy, read our privacy policy  here .", 
            "title": "Newsletter"
        }, 
        {
            "location": "/community/blog/", 
            "text": "Blog\n\n\nStatus' Blog is designed to inform the community of news, updates, ideas, and most importantly helps to keep everyone on the same page.\n\n\nCheck it out at: \n \nhttps://blog.status.im", 
            "title": "Blog"
        }, 
        {
            "location": "/community/blog/#blog", 
            "text": "Status' Blog is designed to inform the community of news, updates, ideas, and most importantly helps to keep everyone on the same page.  Check it out at: \n  https://blog.status.im", 
            "title": "Blog"
        }, 
        {
            "location": "/community/tell-a-friend/", 
            "text": "Evangelism\n\n\n//TODO", 
            "title": "Tell a Friend"
        }, 
        {
            "location": "/community/tell-a-friend/#evangelism", 
            "text": "//TODO", 
            "title": "Evangelism"
        }, 
        {
            "location": "/proposals/commiteth/", 
            "text": "Commiteth\n\n\nCommiteth aims to incentivise development on open source projects hosted on Github.\n\n\ncommiteth.com\n\n\ngithub.com/status-im/commiteth\n\n\nHow does it work?\n\n\nCommiteth fosters open source development by incentivising pull request submissions by attaching a ETH or ERC20 cryptotoken bounty to open issues.\n\n\nA project maintainer must first add their project to Commiteth, and include their address (this address \n Commiteth's address will be the two signatories on the multisig wallet).\n\n\nOnce done, Commiteth will list the project and crawl it's Github Issues with the label \nbounty\n. When found Commiteth will deploy a Multisig wallet to the network with itself and project maintainer as signatories.\n\n\nCommiteth will then generate an image containing the address, a QR code of the address and the balance of the wallet and comment on the issue. (as well as this information in plaintext). Commiteth will update this comment with a new image everytime the balance has changed and when the bounty is complete.\n\n\n  \n\n\nCommiteth observes the repository for pull requests that contain a reference to the \nbounty\n issue by the use of the Github special \"\nfixes #6\n\" feature. Read more about \nClosing Issues via Pull Requests here\n.\n\n\nWhen this pull requests are accepted and merged, Commiteth will sign a transaction in the associated wallet and display it to the maintainer as a pending transaction to sign.\n\n\nThe maintainer must load commiteth.com in Mist or Metamask to complete the transaction.\n\n\nHow do I use it?\n\n\nFirst you must sign-in to Commiteth via a Github login. Then you must submit your receiving address. \n\n\nOnce done you are ready to submit pull requests for issues with the \nbounty\n tag. \n\n\nIf your pull request is accepted, Commiteth will sign the bounty balance to you, however you must wait until the maintainer confirms the transaction.", 
            "title": "Commiteth (WIP)"
        }, 
        {
            "location": "/proposals/commiteth/#commiteth", 
            "text": "Commiteth aims to incentivise development on open source projects hosted on Github.  commiteth.com  github.com/status-im/commiteth", 
            "title": "Commiteth"
        }, 
        {
            "location": "/proposals/commiteth/#how-does-it-work", 
            "text": "Commiteth fosters open source development by incentivising pull request submissions by attaching a ETH or ERC20 cryptotoken bounty to open issues.  A project maintainer must first add their project to Commiteth, and include their address (this address   Commiteth's address will be the two signatories on the multisig wallet).  Once done, Commiteth will list the project and crawl it's Github Issues with the label  bounty . When found Commiteth will deploy a Multisig wallet to the network with itself and project maintainer as signatories.  Commiteth will then generate an image containing the address, a QR code of the address and the balance of the wallet and comment on the issue. (as well as this information in plaintext). Commiteth will update this comment with a new image everytime the balance has changed and when the bounty is complete.      Commiteth observes the repository for pull requests that contain a reference to the  bounty  issue by the use of the Github special \" fixes #6 \" feature. Read more about  Closing Issues via Pull Requests here .  When this pull requests are accepted and merged, Commiteth will sign a transaction in the associated wallet and display it to the maintainer as a pending transaction to sign.  The maintainer must load commiteth.com in Mist or Metamask to complete the transaction.", 
            "title": "How does it work?"
        }, 
        {
            "location": "/proposals/commiteth/#how-do-i-use-it", 
            "text": "First you must sign-in to Commiteth via a Github login. Then you must submit your receiving address.   Once done you are ready to submit pull requests for issues with the  bounty  tag.   If your pull request is accepted, Commiteth will sign the bounty balance to you, however you must wait until the maintainer confirms the transaction.", 
            "title": "How do I use it?"
        }, 
        {
            "location": "/proposals/contact-sharing/", 
            "text": "Contact Sharing\n\n\nbasic idea is to hash the pair of phone numbers (me, other) so that there are many collisions and then publish this (plausible deniable, because of collisions). and the contact your friend out of band if there is a hash that could be a match (which it is most likely not).\n\n\nGeneral problem: \n\u00a0- Data is readable by anyone\n\u00a0- The problem is not so much, that the server must not learn the contacts, but \u00a0that \n\u00a0 \u00a0 \u00a0- no one must learn them, while all data is public\n\n\nAlice announces its connection with Bob by:\n\n\n\n\ncalculating H(A_phone_number + B_phone_number) \n\n\napplying costly scrypt or PBKDF2 hashing to derive H'\n\n\ntruncating H\u2019 to a low number of bits H'', so that collisions are likely\n\n\npublicly registers its unique pubkey_alice_bob for \u00a0H''\n\n\n\n\nNotes so far: \n- rainbow tables of 10^10^2 size (i.e. all phone number combinations) are impractical\n- calculating all combinations is prohibitively costly \n- collisions of H\u2019\u2019 allow plausible deniability\n- Problem: an adversary can impersonate Alice, need spam protection (PoW) here\n\n\nBob wants to know if Alice is participating in the network:\n- Bob calculates H(A_phone_number + B_phone_number) \n- Bob generates H\u2019 and H\u2019'\n- for all matching entries for H\u2019\u2019 (including the one generated by Alice)\n\u00a0- Bob encrypts truncated H(mobile_bob) for pubkey_alice_bob\n\u00a0- and sends the message to Alice inbox on the server\n\u00a0- Alice loads and decrypts the message\n\u00a0- Alice can match \u00a0truncated H(mobile_bob) in hear contact list with a very low false positive rate\n\u00a0- if Alice thinks she knows Bob, she might reply out of band\n\n\nNotes:\n- Bob can still plausibly deny that he knows Alice\n- Bob can still plausibly deny that he participates in the system\n- add some proof of work or similar for spam protection\n\n\nThis is hard against:\n- Leaking users contact lists\n- An adversary with a hypothesis about a connection can learn bobs phone number though\n\n\nLimitations:\n- New users (Bob) won\u2019t see others directly\n- Existing users (Alice) need to invite Bob\n- Quite some computation and communication overhead\n\u00a0- ~ 500 x 10 messages send\n\u00a0- 2x key pairs to remember for each\n\n\nThe Difficulty Of Private Contact Discovery \nhttps://whispersystems.org/blog/contact-discovery/\nhttps://news.ycombinator.com/item?id=7007554\nhttps://news.ycombinator.com/item?id=11288169\nhttps://news.ycombinator.com/item?id=11289223\n\n\nLame solution which is prone to rainbow table attacks. \nhttps://github.com/SilentCircle/contact-discovery", 
            "title": "Contact Sharing (WIP)"
        }, 
        {
            "location": "/proposals/contact-sharing/#contact-sharing", 
            "text": "basic idea is to hash the pair of phone numbers (me, other) so that there are many collisions and then publish this (plausible deniable, because of collisions). and the contact your friend out of band if there is a hash that could be a match (which it is most likely not).  General problem: \n\u00a0- Data is readable by anyone\n\u00a0- The problem is not so much, that the server must not learn the contacts, but \u00a0that \n\u00a0 \u00a0 \u00a0- no one must learn them, while all data is public  Alice announces its connection with Bob by:   calculating H(A_phone_number + B_phone_number)   applying costly scrypt or PBKDF2 hashing to derive H'  truncating H\u2019 to a low number of bits H'', so that collisions are likely  publicly registers its unique pubkey_alice_bob for \u00a0H''   Notes so far: \n- rainbow tables of 10^10^2 size (i.e. all phone number combinations) are impractical\n- calculating all combinations is prohibitively costly \n- collisions of H\u2019\u2019 allow plausible deniability\n- Problem: an adversary can impersonate Alice, need spam protection (PoW) here  Bob wants to know if Alice is participating in the network:\n- Bob calculates H(A_phone_number + B_phone_number) \n- Bob generates H\u2019 and H\u2019'\n- for all matching entries for H\u2019\u2019 (including the one generated by Alice)\n\u00a0- Bob encrypts truncated H(mobile_bob) for pubkey_alice_bob\n\u00a0- and sends the message to Alice inbox on the server\n\u00a0- Alice loads and decrypts the message\n\u00a0- Alice can match \u00a0truncated H(mobile_bob) in hear contact list with a very low false positive rate\n\u00a0- if Alice thinks she knows Bob, she might reply out of band  Notes:\n- Bob can still plausibly deny that he knows Alice\n- Bob can still plausibly deny that he participates in the system\n- add some proof of work or similar for spam protection  This is hard against:\n- Leaking users contact lists\n- An adversary with a hypothesis about a connection can learn bobs phone number though  Limitations:\n- New users (Bob) won\u2019t see others directly\n- Existing users (Alice) need to invite Bob\n- Quite some computation and communication overhead\n\u00a0- ~ 500 x 10 messages send\n\u00a0- 2x key pairs to remember for each  The Difficulty Of Private Contact Discovery \nhttps://whispersystems.org/blog/contact-discovery/\nhttps://news.ycombinator.com/item?id=7007554\nhttps://news.ycombinator.com/item?id=11288169\nhttps://news.ycombinator.com/item?id=11289223  Lame solution which is prone to rainbow table attacks. \nhttps://github.com/SilentCircle/contact-discovery", 
            "title": "Contact Sharing"
        }, 
        {
            "location": "/proposals/chat-api/", 
            "text": "Chat API\n\n\nInterface Anatomy\n\n\nThis anatomy establishes the different sections of the chat interface and establishes a common verbiage. The main components being:\n\n\n\n\nMessage\n\n\nInput\n\n\nKeyboard\n\n\nSuggestions\n\n\n\n\n\n\nAccessing a bot\n\n\n/global\n (hidden)\nUniversal command for the bot, allows the bot command to be referenced in any chat via \n@botname\n. If this exists it should appear in the command list as another section at the bottom. \n\n\n/init\n (hidden)\n\nRun on open chat session, only in 1-to-1 chats.  \n\n\n/\ncommand\n bots can register a command handler of any ASCII title, which then Status repeats\n\n\n@botname/command\n if there is multiple bots in a chat context, then the \n@botname\n can be used to make the distinction (or alternatively a suggestions/commands list should appear to help with the distinction)\n\n\nBot Message\n a bot can send a message that can only be read by another instance of itself in chat history. This message can send markup to draw and contain data. It is activated by a user tapping on it.\n\n\nA message parsed from chat history\n on 1-to-1 chats, any message the user send can be read by the bot and can activate code via \nstatus.on('chat-update', function () { ... } );\n handler.\n\n\nBot Messages\n\n\nA Bot Message can contain it's own markup and a data payload, this message can be transmitted to the chat context. If it is interactable then the interaction (what we currently call response handler) handles the message when tapped. \n\n\nIf the user does not have the bot installed, then we display a custom keyboard that shows the bot name, its reviews/ reputation and a \"Install / Add to Contacts\" button, which the user can either cancel or install and continue with response flow.\n\n\nCommand Handlers\n\n\nOnce a command handler is invoked it is passed the current text / data payload of the message, and is required to return the paramaters (and their placeholder information). The return of the handler must include \n- \nmarkup\n or a \nstatus component(data)\n for the suggestions area \n- \nmarkup\n or a \nstatus component(data)\n for the the keyboard\n- an error object\n- the revised text / data payload.\n\n\nPrivacy\n\n\n\n\na bot can only be interacted with via commands or messages via in 1-to-1 chats\n\n\na bot can only see messages from itself and the current user in group chats.\n\n\n\n\nDeployment \n Testing\n\n\nConsole should have some \n/debug\n mode that allows the user to plugin their phone in and hot-load javascript/webpage to make testing web-based dapps or bots easily from desktop. Ideally it should have integration with \nTruffle\n \n \nEmbark\n and pay respect to \nEIP190\n\n\nOpen Questions\n\n\nIs there an issue of resources  and conservation around Otto VM jails?\nShould it runs per dapp per chat context? or per DApp and then an object in each per chat context?", 
            "title": "Chat API (WIP)"
        }, 
        {
            "location": "/proposals/chat-api/#chat-api", 
            "text": "", 
            "title": "Chat API"
        }, 
        {
            "location": "/proposals/chat-api/#interface-anatomy", 
            "text": "This anatomy establishes the different sections of the chat interface and establishes a common verbiage. The main components being:   Message  Input  Keyboard  Suggestions", 
            "title": "Interface Anatomy"
        }, 
        {
            "location": "/proposals/chat-api/#accessing-a-bot", 
            "text": "/global  (hidden)\nUniversal command for the bot, allows the bot command to be referenced in any chat via  @botname . If this exists it should appear in the command list as another section at the bottom.   /init  (hidden) \nRun on open chat session, only in 1-to-1 chats.    / command  bots can register a command handler of any ASCII title, which then Status repeats  @botname/command  if there is multiple bots in a chat context, then the  @botname  can be used to make the distinction (or alternatively a suggestions/commands list should appear to help with the distinction)  Bot Message  a bot can send a message that can only be read by another instance of itself in chat history. This message can send markup to draw and contain data. It is activated by a user tapping on it.  A message parsed from chat history  on 1-to-1 chats, any message the user send can be read by the bot and can activate code via  status.on('chat-update', function () { ... } );  handler.", 
            "title": "Accessing a bot"
        }, 
        {
            "location": "/proposals/chat-api/#bot-messages", 
            "text": "A Bot Message can contain it's own markup and a data payload, this message can be transmitted to the chat context. If it is interactable then the interaction (what we currently call response handler) handles the message when tapped.   If the user does not have the bot installed, then we display a custom keyboard that shows the bot name, its reviews/ reputation and a \"Install / Add to Contacts\" button, which the user can either cancel or install and continue with response flow.", 
            "title": "Bot Messages"
        }, 
        {
            "location": "/proposals/chat-api/#command-handlers", 
            "text": "Once a command handler is invoked it is passed the current text / data payload of the message, and is required to return the paramaters (and their placeholder information). The return of the handler must include \n-  markup  or a  status component(data)  for the suggestions area \n-  markup  or a  status component(data)  for the the keyboard\n- an error object\n- the revised text / data payload.", 
            "title": "Command Handlers"
        }, 
        {
            "location": "/proposals/chat-api/#privacy", 
            "text": "a bot can only be interacted with via commands or messages via in 1-to-1 chats  a bot can only see messages from itself and the current user in group chats.", 
            "title": "Privacy"
        }, 
        {
            "location": "/proposals/chat-api/#deployment-testing", 
            "text": "Console should have some  /debug  mode that allows the user to plugin their phone in and hot-load javascript/webpage to make testing web-based dapps or bots easily from desktop. Ideally it should have integration with  Truffle     Embark  and pay respect to  EIP190", 
            "title": "Deployment &amp; Testing"
        }, 
        {
            "location": "/proposals/chat-api/#open-questions", 
            "text": "Is there an issue of resources  and conservation around Otto VM jails?\nShould it runs per dapp per chat context? or per DApp and then an object in each per chat context?", 
            "title": "Open Questions"
        }, 
        {
            "location": "/proposals/discover/", 
            "text": "Discover\n\n\nThis document describes the Discover feature of Status. Ethereum is its community, and with Discover we want to connect other Ethereum users with other Ethereum users - to trade and exchange ideas. Ultimately this will reduce transaction costs and increase the utility of ETH.\n\n\nDiscover is done through a users Status (hence the application name). This status is a 140 char sub-headline to a users profile which can be seen on \nmy profile\n, \nuser profile\n and \ndiscover\n screens.\n\n\nA status is private and not shared with anyone except their immediate contacts, unless a \n#hashtag\n is introduced. These #hashtags are locally searchable on the discover screen.\n\n\nThe Discover application protocol is built ontop of Whisper, possibly utilising our messaging protocol and is implemented in \nstatus-im/status-lib\n\n\nPeriodically the client should request from it's contacts, a package of statuses that is an aggregate compilation of discoverable statuses (created using the specifications below), this package should contain no more than 100-500 statuses and the period in which the client requests the package is after when the user is back online and/or after waiting X hours has elapsed. Whisper penalizes larger payloads so we may have to chunk this. \n140chars \u00d7 4bytes (utf-8) \u00d7 100 contacts = 54kb\n\n\nThe 100 contacts the user decides to return is weighted by;\n- the newest available information (latest status from that user),\n- the most seen contact statuses by other contacts. (that user who has seen the same contact status from all his contacts)\n- and actual interactions with contacts, favor contacts that the user has actually messaged themselves.\n- if contact is online\n\n\nThe Discover screen then takes this aggregate search space \n\n100-500 statuses \u00d7 users in contact list\n and organise them by #hashtags, the hashtags that have more than X contacts are put into the carousel under that #hastag category.\n\n\nBelow it the statuses are listed by most recent.\n\n\nOn tapping one of these messages a chat session is attempted with that user.\n\n\nEach user should cache no more than 1000 statuses", 
            "title": "Discover (WIP)"
        }, 
        {
            "location": "/proposals/discover/#discover", 
            "text": "This document describes the Discover feature of Status. Ethereum is its community, and with Discover we want to connect other Ethereum users with other Ethereum users - to trade and exchange ideas. Ultimately this will reduce transaction costs and increase the utility of ETH.  Discover is done through a users Status (hence the application name). This status is a 140 char sub-headline to a users profile which can be seen on  my profile ,  user profile  and  discover  screens.  A status is private and not shared with anyone except their immediate contacts, unless a  #hashtag  is introduced. These #hashtags are locally searchable on the discover screen.  The Discover application protocol is built ontop of Whisper, possibly utilising our messaging protocol and is implemented in  status-im/status-lib  Periodically the client should request from it's contacts, a package of statuses that is an aggregate compilation of discoverable statuses (created using the specifications below), this package should contain no more than 100-500 statuses and the period in which the client requests the package is after when the user is back online and/or after waiting X hours has elapsed. Whisper penalizes larger payloads so we may have to chunk this.  140chars \u00d7 4bytes (utf-8) \u00d7 100 contacts = 54kb  The 100 contacts the user decides to return is weighted by;\n- the newest available information (latest status from that user),\n- the most seen contact statuses by other contacts. (that user who has seen the same contact status from all his contacts)\n- and actual interactions with contacts, favor contacts that the user has actually messaged themselves.\n- if contact is online  The Discover screen then takes this aggregate search space  100-500 statuses \u00d7 users in contact list  and organise them by #hashtags, the hashtags that have more than X contacts are put into the carousel under that #hastag category.  Below it the statuses are listed by most recent.  On tapping one of these messages a chat session is attempted with that user.  Each user should cache no more than 1000 statuses", 
            "title": "Discover"
        }, 
        {
            "location": "/proposals/messaging/", 
            "text": "Messaging\n\n\nChat Protocol Test setup (out of date)\n\n\n\n\n\n\nStart app in android\n\n\n\n\n\n\nBuild geth:\n ```\n git clone https://github.com/status-im/go-ethereum\n cd go-ethereum\n git checkout develop\n make geth\n\n\n\n\n\n\n Alternatively on Mac it can be done by\n ```\n brew tap ethereum/ethereum\nbrew install ethereum --devel\n\n\n\n\n\n\nConnect to app geth console\n\n\n\n\n```\n adb forward tcp:8545 tcp:8545\n build/bin/geth attach http://localhost:8545\n\n\n4. Inside console:\n\n ```\nadmin.addPeer(\nenode://e2f28126720452aa82f7d3083e49e6b3945502cb94d9750a15e27ee310eed6991618199f878e5fbc7dfa0e20f0af9554b41f491dc8f1dbae8f0f2d37a3a613aa@139.162.13.89:55555\n)\n\n\n\n\n\n\nAfter 10 seconds you should see the peer in:\n\n\n\n\nadmin.peers", 
            "title": "Status Messaging (WIP)"
        }, 
        {
            "location": "/proposals/messaging/#messaging", 
            "text": "", 
            "title": "Messaging"
        }, 
        {
            "location": "/proposals/messaging/#chat-protocol-test-setup-out-of-date", 
            "text": "Start app in android    Build geth:\n ```\n git clone https://github.com/status-im/go-ethereum\n cd go-ethereum\n git checkout develop\n make geth     Alternatively on Mac it can be done by\n ```\n brew tap ethereum/ethereum\nbrew install ethereum --devel   Connect to app geth console   ```\n adb forward tcp:8545 tcp:8545\n build/bin/geth attach http://localhost:8545  4. Inside console:\n\n ```\nadmin.addPeer( enode://e2f28126720452aa82f7d3083e49e6b3945502cb94d9750a15e27ee310eed6991618199f878e5fbc7dfa0e20f0af9554b41f491dc8f1dbae8f0f2d37a3a613aa@139.162.13.89:55555 )   After 10 seconds you should see the peer in:   admin.peers", 
            "title": "Chat Protocol Test setup (out of date)"
        }, 
        {
            "location": "/proposals/erc20-exchange/", 
            "text": "ERC20-to-Fiat Exchange", 
            "title": "Exchange (WIP)"
        }, 
        {
            "location": "/proposals/erc20-exchange/#erc20-to-fiat-exchange", 
            "text": "", 
            "title": "ERC20-to-Fiat Exchange"
        }, 
        {
            "location": "/proposals/sticker-market/", 
            "text": "Sticker Market", 
            "title": "Sticker Market (WIP)"
        }, 
        {
            "location": "/proposals/sticker-market/#sticker-market", 
            "text": "", 
            "title": "Sticker Market"
        }, 
        {
            "location": "/proposals/visual-programming/", 
            "text": "Visual Programming", 
            "title": "Visual Programming (WIP)"
        }, 
        {
            "location": "/proposals/visual-programming/#visual-programming", 
            "text": "", 
            "title": "Visual Programming"
        }, 
        {
            "location": "/proposals/moments/", 
            "text": "Moments", 
            "title": "Moments (WIP)"
        }, 
        {
            "location": "/proposals/moments/#moments", 
            "text": "", 
            "title": "Moments"
        }, 
        {
            "location": "/licenses/mpl2/", 
            "text": "Mozilla Public License Version 2.0\n\n\n1. Definitions\n\n\n1.1. \u201cContributor\u201d\n\n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.\n\n\n1.2. \u201cContributor Version\u201d\n\n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.\n\n\n1.3. \u201cContribution\u201d\n\n    means Covered Software of a particular Contributor.\n\n\n1.4. \u201cCovered Software\u201d\n\n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.\n\n\n1.5. \u201cIncompatible With Secondary Licenses\u201d\n\n    means\n\n\n\n\n(a)\n that the initial Contributor has attached the notice described\n    in Exhibit B to the Covered Software; or\n\n\n(b)\n that the Covered Software was made available under the terms of\n    version 1.1 or earlier of the License, but not also under the\n    terms of a Secondary License.\n\n\n\n\n1.6. \u201cExecutable Form\u201d\n\n    means any form of the work other than Source Code Form.\n\n\n1.7. \u201cLarger Work\u201d\n\n    means a work that combines Covered Software with other material, in \n    a separate file or files, that is not Covered Software.\n\n\n1.8. \u201cLicense\u201d\n\n    means this document.\n\n\n1.9. \u201cLicensable\u201d\n\n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.\n\n\n1.10. \u201cModifications\u201d\n\n    means any of the following:\n\n\n\n\n(a)\n any file in Source Code Form that results from an addition to,\n    deletion from, or modification of the contents of Covered\n    Software; or\n\n\n(b)\n any new file in Source Code Form that contains any Covered\n    Software.\n\n\n\n\n1.11. \u201cPatent Claims\u201d of a Contributor\n\n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.\n\n\n1.12. \u201cSecondary License\u201d\n\n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.\n\n\n1.13. \u201cSource Code Form\u201d\n\n    means the form of the work preferred for making modifications.\n\n\n1.14. \u201cYou\u201d (or \u201cYour\u201d)\n\n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \u201cYou\u201d includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \u201ccontrol\u201d means \n(a)\n the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or \n(b)\n ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.\n\n\n2. License Grants and Conditions\n\n\n2.1. Grants\n\n\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\n\n\n\n\n(a)\n under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and\n\n\n(b)\n under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.\n\n\n\n\n2.2. Effective Date\n\n\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n\n\n2.3. Limitations on Grant Scope\n\n\nThe licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:\n\n\n\n\n(a)\n for any code that a Contributor has removed from Covered Software;\n    or\n\n\n(b)\n for infringements caused by: \n(i)\n Your and any other third party's\n    modifications of Covered Software, or \n(ii)\n the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or\n\n\n(c)\n under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.\n\n\n\n\nThis License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).\n\n\n2.4. Subsequent Licenses\n\n\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n\n\n2.5. Representation\n\n\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n\n\n2.6. Fair Use\n\n\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n\n\n2.7. Conditions\n\n\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.\n\n\n3. Responsibilities\n\n\n3.1. Distribution of Source Form\n\n\nAll distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.\n\n\n3.2. Distribution of Executable Form\n\n\nIf You distribute Covered Software in Executable Form then:\n\n\n\n\n\n\n(a)\n such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and\n\n\n\n\n\n\n(b)\n You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.\n\n\n\n\n\n\n3.3. Distribution of a Larger Work\n\n\nYou may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).\n\n\n3.4. Notices\n\n\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n\n\n3.5. Application of Additional Terms\n\n\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n\n\n4. Inability to Comply Due to Statute or Regulation\n\n\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: \n(a)\n comply with\nthe terms of this License to the maximum extent possible; and \n(b)\n\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n\n\n5. Termination\n\n\n5.1.\n The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated \n(a)\n provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and \n(b)\n on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n\n\n5.2.\n If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n\n\n5.3.\n In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n\n\n6. Disclaimer of Warranty\n\n\n\n\nCovered Software is provided under this License on an \u201cas is\u201d\nbasis, without warranty of any kind, either expressed, implied, or\nstatutory, including, without limitation, warranties that the\nCovered Software is free of defects, merchantable, fit for a\nparticular purpose or non-infringing. The entire risk as to the\nquality and performance of the Covered Software is with You.\nShould any Covered Software prove defective in any respect, You\n(not any Contributor) assume the cost of any necessary servicing,\nrepair, or correction. This disclaimer of warranty constitutes an\nessential part of this License. No use of any Covered Software is\nauthorized under this License except under this disclaimer.\n\n\n\n\n7. Limitation of Liability\n\n\n\n\nUnder no circumstances and under no legal theory, whether tort\n(including negligence), contract, or otherwise, shall any\nContributor, or anyone who distributes Covered Software as\npermitted above, be liable to You for any direct, indirect,\nspecial, incidental, or consequential damages of any character\nincluding, without limitation, damages for lost profits, loss of\ngoodwill, work stoppage, computer failure or malfunction, or any\nand all other commercial damages or losses, even if such party\nshall have been informed of the possibility of such damages. This\nlimitation of liability shall not apply to liability for death or\npersonal injury resulting from such party's negligence to the\nextent applicable law prohibits such limitation. Some\njurisdictions do not allow the exclusion or limitation of\nincidental or consequential damages, so this exclusion and\nlimitation may not apply to You.\n\n\n\n\n8. Litigation\n\n\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.\n\n\n9. Miscellaneous\n\n\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n\n\n10. Versions of the License\n\n\n10.1. New Versions\n\n\nMozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.\n\n\n10.2. Effect of New Versions\n\n\nYou may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.\n\n\n10.3. Modified Versions\n\n\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n\n\n10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses\n\n\nIf You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.\n\n\nExhibit A - Source Code Form License Notice\n\n\nThis Source Code Form is subject to the terms of the Mozilla Public\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\nfile, You can obtain one at http://mozilla.org/MPL/2.0/.\n\n\n\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\n\n\nYou may add additional accurate notices of copyright ownership.\n\n\nExhibit B - \u201cIncompatible With Secondary Licenses\u201d Notice\n\n\nThis Source Code Form is \"Incompatible With Secondary Licenses\", as\ndefined by the Mozilla Public License, v. 2.0.", 
            "title": "MPL2"
        }, 
        {
            "location": "/licenses/mpl2/#mozilla-public-license-version-20", 
            "text": "", 
            "title": "Mozilla Public License Version 2.0"
        }, 
        {
            "location": "/licenses/mpl2/#1-definitions", 
            "text": "1.1. \u201cContributor\u201d \n    means each individual or legal entity that creates, contributes to\n    the creation of, or owns Covered Software.  1.2. \u201cContributor Version\u201d \n    means the combination of the Contributions of others (if any) used\n    by a Contributor and that particular Contributor's Contribution.  1.3. \u201cContribution\u201d \n    means Covered Software of a particular Contributor.  1.4. \u201cCovered Software\u201d \n    means Source Code Form to which the initial Contributor has attached\n    the notice in Exhibit A, the Executable Form of such Source Code\n    Form, and Modifications of such Source Code Form, in each case\n    including portions thereof.  1.5. \u201cIncompatible With Secondary Licenses\u201d \n    means   (a)  that the initial Contributor has attached the notice described\n    in Exhibit B to the Covered Software; or  (b)  that the Covered Software was made available under the terms of\n    version 1.1 or earlier of the License, but not also under the\n    terms of a Secondary License.   1.6. \u201cExecutable Form\u201d \n    means any form of the work other than Source Code Form.  1.7. \u201cLarger Work\u201d \n    means a work that combines Covered Software with other material, in \n    a separate file or files, that is not Covered Software.  1.8. \u201cLicense\u201d \n    means this document.  1.9. \u201cLicensable\u201d \n    means having the right to grant, to the maximum extent possible,\n    whether at the time of the initial grant or subsequently, any and\n    all of the rights conveyed by this License.  1.10. \u201cModifications\u201d \n    means any of the following:   (a)  any file in Source Code Form that results from an addition to,\n    deletion from, or modification of the contents of Covered\n    Software; or  (b)  any new file in Source Code Form that contains any Covered\n    Software.   1.11. \u201cPatent Claims\u201d of a Contributor \n    means any patent claim(s), including without limitation, method,\n    process, and apparatus claims, in any patent Licensable by such\n    Contributor that would be infringed, but for the grant of the\n    License, by the making, using, selling, offering for sale, having\n    made, import, or transfer of either its Contributions or its\n    Contributor Version.  1.12. \u201cSecondary License\u201d \n    means either the GNU General Public License, Version 2.0, the GNU\n    Lesser General Public License, Version 2.1, the GNU Affero General\n    Public License, Version 3.0, or any later versions of those\n    licenses.  1.13. \u201cSource Code Form\u201d \n    means the form of the work preferred for making modifications.  1.14. \u201cYou\u201d (or \u201cYour\u201d) \n    means an individual or a legal entity exercising rights under this\n    License. For legal entities, \u201cYou\u201d includes any entity that\n    controls, is controlled by, or is under common control with You. For\n    purposes of this definition, \u201ccontrol\u201d means  (a)  the power, direct\n    or indirect, to cause the direction or management of such entity,\n    whether by contract or otherwise, or  (b)  ownership of more than\n    fifty percent (50%) of the outstanding shares or beneficial\n    ownership of such entity.", 
            "title": "1. Definitions"
        }, 
        {
            "location": "/licenses/mpl2/#2-license-grants-and-conditions", 
            "text": "", 
            "title": "2. License Grants and Conditions"
        }, 
        {
            "location": "/licenses/mpl2/#21-grants", 
            "text": "Each Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:   (a)  under intellectual property rights (other than patent or trademark)\n    Licensable by such Contributor to use, reproduce, make available,\n    modify, display, perform, distribute, and otherwise exploit its\n    Contributions, either on an unmodified basis, with Modifications, or\n    as part of a Larger Work; and  (b)  under Patent Claims of such Contributor to make, use, sell, offer\n    for sale, have made, import, and otherwise transfer either its\n    Contributions or its Contributor Version.", 
            "title": "2.1. Grants"
        }, 
        {
            "location": "/licenses/mpl2/#22-effective-date", 
            "text": "The licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.", 
            "title": "2.2. Effective Date"
        }, 
        {
            "location": "/licenses/mpl2/#23-limitations-on-grant-scope", 
            "text": "The licenses granted in this Section 2 are the only rights granted under\nthis License. No additional rights or licenses will be implied from the\ndistribution or licensing of Covered Software under this License.\nNotwithstanding Section 2.1(b) above, no patent license is granted by a\nContributor:   (a)  for any code that a Contributor has removed from Covered Software;\n    or  (b)  for infringements caused by:  (i)  Your and any other third party's\n    modifications of Covered Software, or  (ii)  the combination of its\n    Contributions with other software (except as part of its Contributor\n    Version); or  (c)  under Patent Claims infringed by Covered Software in the absence of\n    its Contributions.   This License does not grant any rights in the trademarks, service marks,\nor logos of any Contributor (except as may be necessary to comply with\nthe notice requirements in Section 3.4).", 
            "title": "2.3. Limitations on Grant Scope"
        }, 
        {
            "location": "/licenses/mpl2/#24-subsequent-licenses", 
            "text": "No Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).", 
            "title": "2.4. Subsequent Licenses"
        }, 
        {
            "location": "/licenses/mpl2/#25-representation", 
            "text": "Each Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.", 
            "title": "2.5. Representation"
        }, 
        {
            "location": "/licenses/mpl2/#26-fair-use", 
            "text": "This License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.", 
            "title": "2.6. Fair Use"
        }, 
        {
            "location": "/licenses/mpl2/#27-conditions", 
            "text": "Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted\nin Section 2.1.", 
            "title": "2.7. Conditions"
        }, 
        {
            "location": "/licenses/mpl2/#3-responsibilities", 
            "text": "", 
            "title": "3. Responsibilities"
        }, 
        {
            "location": "/licenses/mpl2/#31-distribution-of-source-form", 
            "text": "All distribution of Covered Software in Source Code Form, including any\nModifications that You create or to which You contribute, must be under\nthe terms of this License. You must inform recipients that the Source\nCode Form of the Covered Software is governed by the terms of this\nLicense, and how they can obtain a copy of this License. You may not\nattempt to alter or restrict the recipients' rights in the Source Code\nForm.", 
            "title": "3.1. Distribution of Source Form"
        }, 
        {
            "location": "/licenses/mpl2/#32-distribution-of-executable-form", 
            "text": "If You distribute Covered Software in Executable Form then:    (a)  such Covered Software must also be made available in Source Code\n    Form, as described in Section 3.1, and You must inform recipients of\n    the Executable Form how they can obtain a copy of such Source Code\n    Form by reasonable means in a timely manner, at a charge no more\n    than the cost of distribution to the recipient; and    (b)  You may distribute such Executable Form under the terms of this\n    License, or sublicense it under different terms, provided that the\n    license for the Executable Form does not attempt to limit or alter\n    the recipients' rights in the Source Code Form under this License.", 
            "title": "3.2. Distribution of Executable Form"
        }, 
        {
            "location": "/licenses/mpl2/#33-distribution-of-a-larger-work", 
            "text": "You may create and distribute a Larger Work under terms of Your choice,\nprovided that You also comply with the requirements of this License for\nthe Covered Software. If the Larger Work is a combination of Covered\nSoftware with a work governed by one or more Secondary Licenses, and the\nCovered Software is not Incompatible With Secondary Licenses, this\nLicense permits You to additionally distribute such Covered Software\nunder the terms of such Secondary License(s), so that the recipient of\nthe Larger Work may, at their option, further distribute the Covered\nSoftware under the terms of either this License or such Secondary\nLicense(s).", 
            "title": "3.3. Distribution of a Larger Work"
        }, 
        {
            "location": "/licenses/mpl2/#34-notices", 
            "text": "You may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.", 
            "title": "3.4. Notices"
        }, 
        {
            "location": "/licenses/mpl2/#35-application-of-additional-terms", 
            "text": "You may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.", 
            "title": "3.5. Application of Additional Terms"
        }, 
        {
            "location": "/licenses/mpl2/#4-inability-to-comply-due-to-statute-or-regulation", 
            "text": "If it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must:  (a)  comply with\nthe terms of this License to the maximum extent possible; and  (b) \ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.", 
            "title": "4. Inability to Comply Due to Statute or Regulation"
        }, 
        {
            "location": "/licenses/mpl2/#5-termination", 
            "text": "5.1.  The rights granted under this License will terminate automatically\nif You fail to comply with any of its terms. However, if You become\ncompliant, then the rights granted under this License from a particular\nContributor are reinstated  (a)  provisionally, unless and until such\nContributor explicitly and finally terminates Your grants, and  (b)  on an\nongoing basis, if such Contributor fails to notify You of the\nnon-compliance by some reasonable means prior to 60 days after You have\ncome back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.  5.2.  If You initiate litigation against any entity by asserting a patent\ninfringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.  5.3.  In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.", 
            "title": "5. Termination"
        }, 
        {
            "location": "/licenses/mpl2/#6-disclaimer-of-warranty", 
            "text": "Covered Software is provided under this License on an \u201cas is\u201d\nbasis, without warranty of any kind, either expressed, implied, or\nstatutory, including, without limitation, warranties that the\nCovered Software is free of defects, merchantable, fit for a\nparticular purpose or non-infringing. The entire risk as to the\nquality and performance of the Covered Software is with You.\nShould any Covered Software prove defective in any respect, You\n(not any Contributor) assume the cost of any necessary servicing,\nrepair, or correction. This disclaimer of warranty constitutes an\nessential part of this License. No use of any Covered Software is\nauthorized under this License except under this disclaimer.", 
            "title": "6. Disclaimer of Warranty"
        }, 
        {
            "location": "/licenses/mpl2/#7-limitation-of-liability", 
            "text": "Under no circumstances and under no legal theory, whether tort\n(including negligence), contract, or otherwise, shall any\nContributor, or anyone who distributes Covered Software as\npermitted above, be liable to You for any direct, indirect,\nspecial, incidental, or consequential damages of any character\nincluding, without limitation, damages for lost profits, loss of\ngoodwill, work stoppage, computer failure or malfunction, or any\nand all other commercial damages or losses, even if such party\nshall have been informed of the possibility of such damages. This\nlimitation of liability shall not apply to liability for death or\npersonal injury resulting from such party's negligence to the\nextent applicable law prohibits such limitation. Some\njurisdictions do not allow the exclusion or limitation of\nincidental or consequential damages, so this exclusion and\nlimitation may not apply to You.", 
            "title": "7. Limitation of Liability"
        }, 
        {
            "location": "/licenses/mpl2/#8-litigation", 
            "text": "Any litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party's ability to bring\ncross-claims or counter-claims.", 
            "title": "8. Litigation"
        }, 
        {
            "location": "/licenses/mpl2/#9-miscellaneous", 
            "text": "This License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.", 
            "title": "9. Miscellaneous"
        }, 
        {
            "location": "/licenses/mpl2/#10-versions-of-the-license", 
            "text": "", 
            "title": "10. Versions of the License"
        }, 
        {
            "location": "/licenses/mpl2/#101-new-versions", 
            "text": "Mozilla Foundation is the license steward. Except as provided in Section\n10.3, no one other than the license steward has the right to modify or\npublish new versions of this License. Each version will be given a\ndistinguishing version number.", 
            "title": "10.1. New Versions"
        }, 
        {
            "location": "/licenses/mpl2/#102-effect-of-new-versions", 
            "text": "You may distribute the Covered Software under the terms of the version\nof the License under which You originally received the Covered Software,\nor under the terms of any subsequent version published by the license\nsteward.", 
            "title": "10.2. Effect of New Versions"
        }, 
        {
            "location": "/licenses/mpl2/#103-modified-versions", 
            "text": "If you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).", 
            "title": "10.3. Modified Versions"
        }, 
        {
            "location": "/licenses/mpl2/#104-distributing-source-code-form-that-is-incompatible-with-secondary-licenses", 
            "text": "If You choose to distribute Source Code Form that is Incompatible With\nSecondary Licenses under the terms of this version of the License, the\nnotice described in Exhibit B of this License must be attached.", 
            "title": "10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses"
        }, 
        {
            "location": "/licenses/mpl2/#exhibit-a-source-code-form-license-notice", 
            "text": "This Source Code Form is subject to the terms of the Mozilla Public\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\nfile, You can obtain one at http://mozilla.org/MPL/2.0/.  If it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.  You may add additional accurate notices of copyright ownership.", 
            "title": "Exhibit A - Source Code Form License Notice"
        }, 
        {
            "location": "/licenses/mpl2/#exhibit-b-incompatible-with-secondary-licenses-notice", 
            "text": "This Source Code Form is \"Incompatible With Secondary Licenses\", as\ndefined by the Mozilla Public License, v. 2.0.", 
            "title": "Exhibit B - \u201cIncompatible With Secondary Licenses\u201d Notice"
        }, 
        {
            "location": "/licenses/lgpl-v3.0-static/", 
            "text": "GNU Lesser General Public License\n\n\nVersion 3, 29 June 2007\n\n\nCopyright \u00a9 2007 Free Software Foundation, Inc. \nhttp://fsf.org/\n\n\nEveryone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.\n\n\nThis version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n\n0. Additional Definitions\n\n\nAs used herein, \u201cthis License\u201d refers to version 3 of the GNU Lesser\nGeneral Public License, and the \u201cGNU GPL\u201d refers to version 3 of the GNU\nGeneral Public License.\n\n\n\u201cThe Library\u201d refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n\nAn \u201cApplication\u201d is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n\nA \u201cCombined Work\u201d is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \u201cLinked\nVersion\u201d.\n\n\nThe \u201cMinimal Corresponding Source\u201d for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n\nThe \u201cCorresponding Application Code\u201d for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n\n1. Exception to Section 3 of the GNU GPL\n\n\nYou may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n\n2. Conveying Modified Versions\n\n\nIf you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n\n\n\n\n\na)\n under this License, provided that you make a good faith effort to\nensure that, in the event an Application does not supply the\nfunction or data, the facility still operates, and performs\nwhatever part of its purpose remains meaningful, or\n\n\n\n\n\n\nb)\n under the GNU GPL, with none of the additional permissions of\nthis License applicable to that copy.\n\n\n\n\n\n\n3. Object Code Incorporating Material from Library Header Files\n\n\nThe object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n\n\n\na)\n Give prominent notice with each copy of the object code that the\nLibrary is used in it and that the Library and its use are\ncovered by this License.\n\n\nb)\n Accompany the object code with a copy of the GNU GPL and this license\ndocument.\n\n\n\n\n4. Combined Works\n\n\nYou may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n\n\n\n\n\na)\n Give prominent notice with each copy of the Combined Work that\nthe Library is used in it and that the Library and its use are\ncovered by this License.\n\n\n\n\n\n\nb)\n Accompany the Combined Work with a copy of the GNU GPL and this license\ndocument.\n\n\n\n\n\n\nc)\n For a Combined Work that displays copyright notices during\nexecution, include the copyright notice for the Library among\nthese notices, as well as a reference directing the user to the\ncopies of the GNU GPL and this license document.\n\n\n\n\n\n\nd)\n Do one of the following:\n\n\n\n\n0)\n Convey the Minimal Corresponding Source under the terms of this\nLicense, and the Corresponding Application Code in a form\nsuitable for, and under terms that permit, the user to\nrecombine or relink the Application with a modified version of\nthe Linked Version to produce a modified Combined Work, in the\nmanner specified by section 6 of the GNU GPL for conveying\nCorresponding Source.\n\n\n1)\n Use a suitable shared library mechanism for linking with the\nLibrary.  A suitable mechanism is one that \n(a)\n uses at run time\na copy of the Library already present on the user's computer\nsystem, and \n(b)\n will operate properly with a modified version\nof the Library that is interface-compatible with the Linked\nVersion.\n\n\n\n\n\n\n\n\ne)\n Provide Installation Information, but only if you would otherwise\nbe required to provide such information under section 6 of the\nGNU GPL, and only to the extent that such information is\nnecessary to install and execute a modified version of the\nCombined Work produced by recombining or relinking the\nApplication with a modified version of the Linked Version. (If\nyou use option \n4d0\n, the Installation Information must accompany\nthe Minimal Corresponding Source and Corresponding Application\nCode. If you use option \n4d1\n, you must provide the Installation\nInformation in the manner specified by section 6 of the GNU GPL\nfor conveying Corresponding Source.)\n\n\n\n\n\n\n5. Combined Libraries\n\n\nYou may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n\n\n\na)\n Accompany the combined library with a copy of the same work based\non the Library, uncombined with any other library facilities,\nconveyed under the terms of this License.\n\n\nb)\n Give prominent notice with the combined library that part of it\nis a work based on the Library, and explaining where to find the\naccompanying uncombined form of the same work.\n\n\n\n\n6. Revised Versions of the GNU Lesser General Public License\n\n\nThe Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n\nEach version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \u201cor any later version\u201d\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n\nIf the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n\n\n\n\nSPECIAL EXCEPTION GRANTED BY COPYRIGHT HOLDERS\n\n\nAs a special exception, copyright holders give you permission to link this\nlibrary with independent modules to produce an executable, regardless of\nthe license terms of these independent modules, and to copy and distribute\nthe resulting executable under terms of your choice, provided that you also\nmeet, for each linked independent module, the terms and conditions of\nthe license of that module. An independent module is a module which is not\nderived from or based on this library. If you modify this library, you must\nextend this exception to your version of the library.\n\n\nNote: this exception relieves you of any obligations under sections 4 and 5\nof this license, and section 6 of the GNU General Public License.", 
            "title": "LGPLv3-static"
        }, 
        {
            "location": "/licenses/lgpl-v3.0-static/#gnu-lesser-general-public-license", 
            "text": "Version 3, 29 June 2007  Copyright \u00a9 2007 Free Software Foundation, Inc.  http://fsf.org/  Everyone is permitted to copy and distribute verbatim copies\nof this license document, but changing it is not allowed.  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.", 
            "title": "GNU Lesser General Public License"
        }, 
        {
            "location": "/licenses/lgpl-v3.0-static/#0-additional-definitions", 
            "text": "As used herein, \u201cthis License\u201d refers to version 3 of the GNU Lesser\nGeneral Public License, and the \u201cGNU GPL\u201d refers to version 3 of the GNU\nGeneral Public License.  \u201cThe Library\u201d refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.  An \u201cApplication\u201d is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.  A \u201cCombined Work\u201d is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \u201cLinked\nVersion\u201d.  The \u201cMinimal Corresponding Source\u201d for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.  The \u201cCorresponding Application Code\u201d for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.", 
            "title": "0. Additional Definitions"
        }, 
        {
            "location": "/licenses/lgpl-v3.0-static/#1-exception-to-section-3-of-the-gnu-gpl", 
            "text": "You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.", 
            "title": "1. Exception to Section 3 of the GNU GPL"
        }, 
        {
            "location": "/licenses/lgpl-v3.0-static/#2-conveying-modified-versions", 
            "text": "If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:    a)  under this License, provided that you make a good faith effort to\nensure that, in the event an Application does not supply the\nfunction or data, the facility still operates, and performs\nwhatever part of its purpose remains meaningful, or    b)  under the GNU GPL, with none of the additional permissions of\nthis License applicable to that copy.", 
            "title": "2. Conveying Modified Versions"
        }, 
        {
            "location": "/licenses/lgpl-v3.0-static/#3-object-code-incorporating-material-from-library-header-files", 
            "text": "The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:   a)  Give prominent notice with each copy of the object code that the\nLibrary is used in it and that the Library and its use are\ncovered by this License.  b)  Accompany the object code with a copy of the GNU GPL and this license\ndocument.", 
            "title": "3. Object Code Incorporating Material from Library Header Files"
        }, 
        {
            "location": "/licenses/lgpl-v3.0-static/#4-combined-works", 
            "text": "You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:    a)  Give prominent notice with each copy of the Combined Work that\nthe Library is used in it and that the Library and its use are\ncovered by this License.    b)  Accompany the Combined Work with a copy of the GNU GPL and this license\ndocument.    c)  For a Combined Work that displays copyright notices during\nexecution, include the copyright notice for the Library among\nthese notices, as well as a reference directing the user to the\ncopies of the GNU GPL and this license document.    d)  Do one of the following:   0)  Convey the Minimal Corresponding Source under the terms of this\nLicense, and the Corresponding Application Code in a form\nsuitable for, and under terms that permit, the user to\nrecombine or relink the Application with a modified version of\nthe Linked Version to produce a modified Combined Work, in the\nmanner specified by section 6 of the GNU GPL for conveying\nCorresponding Source.  1)  Use a suitable shared library mechanism for linking with the\nLibrary.  A suitable mechanism is one that  (a)  uses at run time\na copy of the Library already present on the user's computer\nsystem, and  (b)  will operate properly with a modified version\nof the Library that is interface-compatible with the Linked\nVersion.     e)  Provide Installation Information, but only if you would otherwise\nbe required to provide such information under section 6 of the\nGNU GPL, and only to the extent that such information is\nnecessary to install and execute a modified version of the\nCombined Work produced by recombining or relinking the\nApplication with a modified version of the Linked Version. (If\nyou use option  4d0 , the Installation Information must accompany\nthe Minimal Corresponding Source and Corresponding Application\nCode. If you use option  4d1 , you must provide the Installation\nInformation in the manner specified by section 6 of the GNU GPL\nfor conveying Corresponding Source.)", 
            "title": "4. Combined Works"
        }, 
        {
            "location": "/licenses/lgpl-v3.0-static/#5-combined-libraries", 
            "text": "You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:   a)  Accompany the combined library with a copy of the same work based\non the Library, uncombined with any other library facilities,\nconveyed under the terms of this License.  b)  Give prominent notice with the combined library that part of it\nis a work based on the Library, and explaining where to find the\naccompanying uncombined form of the same work.", 
            "title": "5. Combined Libraries"
        }, 
        {
            "location": "/licenses/lgpl-v3.0-static/#6-revised-versions-of-the-gnu-lesser-general-public-license", 
            "text": "The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \u201cor any later version\u201d\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.", 
            "title": "6. Revised Versions of the GNU Lesser General Public License"
        }, 
        {
            "location": "/licenses/lgpl-v3.0-static/#special-exception-granted-by-copyright-holders", 
            "text": "As a special exception, copyright holders give you permission to link this\nlibrary with independent modules to produce an executable, regardless of\nthe license terms of these independent modules, and to copy and distribute\nthe resulting executable under terms of your choice, provided that you also\nmeet, for each linked independent module, the terms and conditions of\nthe license of that module. An independent module is a module which is not\nderived from or based on this library. If you modify this library, you must\nextend this exception to your version of the library.  Note: this exception relieves you of any obligations under sections 4 and 5\nof this license, and section 6 of the GNU General Public License.", 
            "title": "SPECIAL EXCEPTION GRANTED BY COPYRIGHT HOLDERS"
        }
    ]
}